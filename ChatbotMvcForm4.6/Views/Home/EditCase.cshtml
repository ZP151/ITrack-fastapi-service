@{
    ViewBag.Title = "Chatbot Interaction";
}

<h2>Issue Description</h2>
<textarea id="issueDesc" class="form-control" rows="5"></textarea>
<br>
<div class="action-buttons">
    <button id="submitBtn" class="btn btn-primary">Submit</button>
    <button id="viewReportBtn" class="btn btn-success" style="margin-left: 10px;">View RCA Report</button>
</div>


<!-- Chatbot Window -->
<div id="chatbotWindow">
    <!-- Loader -->
    <div id="loader" class="loader-container">
        <div class="loader"></div>
        <div class="loader-text">Processing your request...</div>
    </div>

    <div id="chatbotHeader">
        <h3>Chatbot Helper</h3>
        <button id="closeChatbot">✖</button>
    </div>

    <div id="chatbotTitle">Chatbot history</div>
    <div id="chatContainer">
        <div id="chatMessages">
            <div id="userMessages" class="messages-container"></div>
            <div id="assistantMessages" class="messages-container"></div>
        </div>
        <div id="messageControls">
            <button id="prevMessage">⬆</button>
            <button id="nextMessage">⬇</button>
        </div>
    </div>

    <div id="inputTitle">
        <span>Edit Details Below</span>
        <div class="section-controls">
            <button id="expandAllBtn">Expand All</button>
            <button id="collapseAllBtn">Collapse All</button>
        </div>
    </div>
    <div id="chatbot-input-area">
        <table id="formTable">
            <thead>
                <tr>
                    <th>Field</th>
                    <th>Value</th>
                    <th>Manipulations</th>
                </tr>
            </thead>
            <tbody id="formContainer">
                <!-- Dynamic form content will be loaded here -->
            </tbody>
        </table>
    </div>
    <div id="chatbot-controls">
        <button id="sendBtn" class="btn-action">Send</button>
        <button id="confirmBtn" class="btn-action">Confirm</button>
    </div>
</div>

<style>
    /* Base styles */
    #chatbotWindow {
        display: none;
        position: fixed;
        width: 60%;
        height: 90%;
        background: #fff;
        border: 1px solid #ccc;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
        z-index: 10;
        flex-direction: column;
        overflow: hidden;
    }

    /* Header */
    #chatbotHeader {
        display: flex;
        justify-content: space-between;
        align-items: center;
        background: #f0f0f0;
        padding: 8px;
        cursor: move;
    }

    #closeChatbot {
        border: none;
        background: none;
        cursor: pointer;
        font-size: 16px;
    }
        /* Loading animation styles */
    .loader-container {
        display: none;
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 255, 255, 0.8);
        z-index: 9999;
        justify-content: center;
        align-items: center;
        flex-direction: column;
    }

    .loader {
        border: 5px solid #f3f3f3;
        border-top: 5px solid #3498db;
        border-radius: 50%;
        width: 50px;
        height: 50px;
        animation: spin 2s linear infinite;
        margin-bottom: 15px;
    }

    .loader-text {
        font-size: 18px;
        color: #333;
    }

    /* Chat section */
    #chatbotTitle {
        background: #f0f0f0;
        padding: 5px;
        font-weight: bold;
    }

    #chatContainer {
        height: 200px;
        border-bottom: 1px solid #ccc;
        overflow: hidden;
        position: relative;
    }

    #chatMessages {
        height: 190px;
        overflow-y: auto;
        background: #f8f9fa;
        display: flex;
        flex-direction: column;
    }

    .messages-container {
        padding: 5px;
    }

    .user-message, .ai-message {
        margin: 5px 0;
        padding: 5px;
        border-radius: 3px;
    }

    .user-message {
        background-color: #e6f0ff;
    }

    .ai-message {
        background-color: #e6ffe6;
    }

    #messageControls {
        position: absolute;
        right: 5px;
        top: 5px;
    }

        #messageControls button {
            margin: 0 2px;
            padding: 2px 5px;
            background: #f0f0f0;
            border: 1px solid #ccc;
            border-radius: 3px;
        }

    /* Form section */
    #inputTitle {
        background: #f0f0f0;
        padding: 5px;
        font-weight: bold;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .section-controls button {
        margin-left: 5px;
        padding: 2px 5px;
        background: #f0f0f0;
        border: 1px solid #ccc;
        border-radius: 3px;
        font-size: 12px;
    }

    #chatbot-input-area {
        flex-grow: 1;
        overflow-y: auto;
        padding: 5px;
    }

    #formTable {
        width: 100%;
        border-collapse: collapse;
    }

        #formTable thead {
            position: sticky;
            top: 0;
            background: #fff;
            z-index: 1;
        }

    th, td {
        border: 1px solid #ddd;
        padding: 5px;
        text-align: left;
    }

    th {
        background: #f2f2f2;
    }
    /* Reduce first and third column */
    table th:first-child,
    table td:first-child {
        width: 35%;
    }

    table th:last-child,
    table td:last-child {
        width: 15%;
    }
    /* Increase width proportion of second column (Value) */
    table th:nth-child(2),
    table td:nth-child(2) {
        width: 50%; /* Increase to 65% or higher */
    }

    /* First column input style */
    table td:nth-child(1) input[type="text"] {
        width: 95%;
        box-sizing: border-box;
        padding: 3px;
    }

    /* Second column input style */
    table td:nth-child(2) input[type="text"] {
        width: 100%;
        box-sizing: border-box;
        padding: 3px;
    }

    /* Controls */
    #chatbot-controls {
        padding: 8px;
        text-align: center;
        background: #f0f0f0;
    }

    .btn-action {
        padding: 5px 10px;
        margin: 0 5px;
        cursor: pointer;
    }

    /* RCA Report Window Styles */
    .rca-report-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1000;
    }
    
    .rca-report-window {
        position: fixed;
        top: 10%;
        left: 15%;
        width: 70%;
        height: 80%;
        background-color: #fff;
        z-index: 1001;
        border-radius: 5px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
        display: flex;
        flex-direction: column;
        overflow: hidden;
    }
    
    .rca-report-title {
        display: flex;
        justify-content: space-between;
        align-items: center;
        background-color: #f0f0f0;
        padding: 10px 15px;
        border-bottom: 1px solid #ccc;
    }
    
    .rca-report-title h3 {
        margin: 0;
    }
    
    .rca-report-title button {
        background: none;
        border: none;
        cursor: pointer;
        font-size: 16px;
    }
    
    .download-btn {
        background-color: #4CAF50 !important;
        color: white !important;
        padding: 5px 10px !important;
        border-radius: 3px !important;
        margin-right: 10px !important;
    }
    
    .rca-report-content {
        flex: 1;
        padding: 15px;
        overflow-y: auto;
        line-height: 1.5;
    }
    
    .rca-report-content h1 {
        font-size: 24px;
        margin-top: 0;
    }
    
    .rca-report-content h2 {
        font-size: 20px;
        margin-top: 20px;
    }
    
    .rca-report-content h3 {
        font-size: 18px;
    }
    
    .rca-report-content ul {
        margin: 5px 0;
        padding-left: 20px;
    }
    
    .rca-report-content li {
        margin-bottom: 5px;
    }

    /* Utility */
    .hidden {
        display: none;
    }

    .section-header {
        background: #f5f5f5;
        cursor: pointer;
    }

    .visibility-toggle {
        margin-left: 5px;
        cursor: pointer;
    }
</style>

@section scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    <script>
        $(document).ready(function() {
            let isFinal = false;
            let issueDesc = "";
            let formData = {};
            let sectionStates = {};

            // 初始时禁用View Report按钮，但保持可见
            $("#viewReportBtn").prop("disabled", true);

            // 添加View Report按钮的点击事件
            $("#viewReportBtn").click(function() {
                // 获取保存的RCA报告数据
                let reportData = $("body").data("rcaReportData");
                if (reportData) {
                    showRCAReport(reportData);
                } else {
                    alert("No RCA report data available. Please submit the form first.");
                }
            });

            // 自适应设置窗口位置
            function positionChatbotWindow() {
                let windowHeight = $(window).height();
                let windowWidth = $(window).width();
                let chatbotHeight = $("#chatbotWindow").outerHeight();
                let chatbotWidth = $("#chatbotWindow").outerWidth();
                
                // 计算适当的top值，确保窗口在视图中有一定偏移
                let topPosition = Math.max(windowHeight * 0.15, 50);
                
                // 确保在较小屏幕上窗口不会超出底部
                if (topPosition + chatbotHeight > windowHeight) {
                    topPosition = Math.max(10, windowHeight * 0.05);
                }
                
                // 计算左侧位置使窗口水平居中
                let leftPosition = (windowWidth - chatbotWidth) / 2;
                if (leftPosition < 0) leftPosition = 0;
                
                // 设置窗口位置 - 不使用transform以避免与draggable冲突
                $("#chatbotWindow").css({
                    "position": "fixed",
                    "top": topPosition + "px",
                    "left": leftPosition + "px"
                });
            }
            
            // 初始定位
            $("#chatbotWindow").css("display", "flex").hide(); // 先使窗口可测量但不可见
            setTimeout(function() {
                positionChatbotWindow();
            }, 0);
            
            // 窗口大小改变时重新定位
            $(window).resize(function() {
                if ($("#chatbotWindow").is(":visible")) {
                    positionChatbotWindow();
                }
            });
            
            // Make chatbot window draggable - 调整draggable设置
            $("#chatbotWindow").draggable({
                handle: "#chatbotHeader",
                containment: "window", // 改为window而不是document
                cursor: "move",
                start: function (event, ui) {
                    // 保存初始位置
                    $(this).data('startPos', $(this).position());
                },
                stop: function (event, ui) {
                    // 防止位置异常
                    if (ui.position.left < 0 || ui.position.top < 0) {
                        $(this).css($(this).data('startPos'));
                    }
                }
            });

            // Submit button
            $("#submitBtn").click(function(e) {
                e.preventDefault();
                issueDesc = $("#issueDesc").val();
                if (issueDesc.trim() === "") {
                    alert("Please enter an issue description.");
                    return;
                }
                $("#chatbotWindow").css("display", "flex").show();

                $(this).prop("disabled", true);

                $("#loader").css("display", "flex").show();

                // Initialize formData
                formData = {
                    category: "",
                    task: "",
                    summary: "",
                    description: "",
                    root_causes: [],
                    conclusion: "",
                    impact_analysis: { 
                        affected_module: "", 
                        severity: "Severity 1", 
                        priority: "Medium", 
                        defect_phase: "Unknown",
                        dynamic_fields: [] 
                    },
                    resolution: { fix_applied: "", dynamic_fields: [] },
                    preventive_measures: { general_measure: "", dynamic_fields: [] },
                    supplementary_info: { dynamic_fields: [] },
                    additional_questions: { dynamic_fields: [] }
                };

                // Initialize section states
                sectionStates = {
                    category: { expanded: true, visible: true },
                    task: { expanded: true, visible: true },
                    summary: { expanded: true, visible: true },
                    description: { expanded: true, visible: true },
                    root_causes: { expanded: true, visible: true },
                    conclusion: { expanded: true, visible: true },
                    impact_analysis: { expanded: true, visible: true },
                    resolution: { expanded: true, visible: true },
                    preventive_measures: { expanded: true, visible: true },
                    supplementary_info: { expanded: true, visible: true },
                    additional_questions: { expanded: true, visible: true }
                };

                loadForm();
                sendMessage(isFinal);
            });

            // Send button
            $("#sendBtn").click(function() {
                sendMessage(isFinal);
            });

            // Confirm button
            $("#confirmBtn").click(function() {
                // 更新formData以确保使用最新的表单数据
                updateFormDataFromUI();
                
                // 获取当前的conclusion值
                let conclusion = formData.conclusion || "";
                
                // 更新formData，设置description为conclusion
                formData.description = conclusion;
                
                // 更新文本区域展示
                $("#issueDesc").val(conclusion);

                // 显示加载动画
                $("#loader").css("display", "flex").show();

                $.ajax({
                    url: '@Url.Action("ChatbotOptimize", "Home")',
                    type: "POST",
                    contentType: "application/json",
                    dataType: "json",
                    data: JSON.stringify({ formData: formData, isFinal: true }),
                    success: function (response) {
                        // 隐藏加载动画
                        $("#loader").hide();

                        if (response.status === "success") {
                            // 处理成功响应
                            
                            // 检查是否有RCA报告
                            if (response.rca_report) {
                                // 隐藏聊天窗口
                                $("#chatbotWindow").hide();
                                $("#chatMessages").html("");
                                
                                // 创建一个容器来保存报告数据
                                $("body").data("rcaReportData", response.rca_report);
                                
                                // 显示提示
                                alert("Form submitted successfully! You can now view the RCA report.");
                                
                                // 启用提交按钮和View Report按钮
                                $("#submitBtn").prop("disabled", false);
                                $("#viewReportBtn").prop("disabled", false);
                            } else {
                                // 如果没有RCA报告，显示常规成功消息
                                $("#chatbotWindow").hide();
                                $("#chatMessages").html("");
                                alert("Form submitted successfully!");
                                $("#submitBtn").prop("disabled", false);
                            }
                        } else if (response.error) {
                            // 处理错误响应
                            console.error("Error from API:", response.error);
                            alert("Error: " + response.error);

                            // 如果有响应字符串，可以显示或处理
                            if (response.response) {
                                console.log("Response data:", response.response);
                                appendMessage("System", "Error occurred but received response: " + response.response, "ai-message");
                            }
                        } else {
                            // 处理其他响应
                            alert("Operation completed with unknown status");
                        }
                    },
                    error: function(xhr, status, error) {
                        // 隐藏加载动画
                        $("#loader").hide();
                        
                        console.error("Error:", error);
                        alert("Chatbot service failed. Status: " + xhr.status);
                    }
                });
            });

            // Close button
            $("#closeChatbot").click(function() {
                $("#chatbotWindow").hide();
                $("#chatMessages").html("");
            });

            // Expand/Collapse All buttons
            $("#expandAllBtn").click(function() {
                Object.keys(sectionStates).forEach(key => {
                    sectionStates[key].expanded = true;
                });
                loadForm();
            });

            $("#collapseAllBtn").click(function() {
                Object.keys(sectionStates).forEach(key => {
                    sectionStates[key].expanded = false;
                });
                loadForm();
            });

            // Message navigation
            let currentMessageIndex = 0;

            $("#prevMessage").click(function() {
                if (currentMessageIndex > 0) {
                    currentMessageIndex--;
                    scrollToMessage(currentMessageIndex);
                }
            });

            $("#nextMessage").click(function() {
                let totalMessages = $("#chatMessages .chat-message").length;
                if (currentMessageIndex < totalMessages - 1) {
                    currentMessageIndex++;
                    scrollToMessage(currentMessageIndex);
                }
            });

            function scrollToMessage(index) {
                let targetMessage = $("#message-" + index);
                if (targetMessage.length) {
                    $("#chatMessages").animate({
                        scrollTop: targetMessage.offset().top - $("#chatMessages").offset().top + $("#chatMessages").scrollTop()
                    }, 300);
                }
            }

            function assignMessageIds() {
                $("#chatMessages .chat-message").each(function(index) {
                    $(this).attr("id", "message-" + index);
                });
            }

            // Send message to server
            function sendMessage(finalStatus) {
                // 显示加载动画
                $("#loader").css("display", "flex").show();

                // 先更新formData以确保使用最新的表单数据
                updateFormDataFromUI();

                let payload;

                if (finalStatus) {
                    // 使用当前的formData而不是空对象
                    payload = JSON.stringify({ formData: formData, isFinal: true });
                } else {
                    let requestData = { formData: {}, isFinal: false };

                    if ($("#submitBtn").is(":disabled")) {
                        // 首次发送，使用初始化的数据加上用户输入
                        requestData.formData = {
                            category: "",
                            task: "",
                            summary: "",
                            description: issueDesc,
                            root_causes: [],
                            conclusion: "",
                            impact_analysis: {
                                affected_module: "",
                                severity: "Severity 1",
                                priority: "Medium",
                                defect_phase: "Unknown",
                                dynamic_fields: []
                            },
                            resolution: {
                                fix_applied: "",
                                dynamic_fields: []
                            },
                            preventive_measures: {
                                general_measure: "",
                                dynamic_fields: []
                            },
                            supplementary_info: {
                                dynamic_fields: []
                            },
                            additional_questions: {
                                dynamic_fields: []
                            }
                        };
                    } else {
                        // 后续发送，使用更新后的formData
                        requestData.formData = formData;
                    }

                    payload = JSON.stringify(requestData);
                }

                appendMessage("User", payload, "user-message");

                $.ajax({
                    url: '@Url.Action("ChatbotOptimize", "Home")',
                    type: "POST",
                    contentType: "application/json",
                    dataType: "json",
                    data: payload,
                    success: function (response) {
                        

                        Object.keys(formData).forEach(key => {
                            if (typeof formData[key] === "object" && formData[key] !== null) {
                                Object.assign(formData[key], mapResponseToFormData(response)[key]);
                            } else {
                                formData[key] = mapResponseToFormData(response)[key];
                            }
                        });

                        loadForm();

                        let formattedJson = JSON.stringify(response, null, 2);
                        appendMessage("Assistant", formattedJson, "ai-message");
                    },
                    error: function (xhr, status, error) {
                        $("#loader").hide();

                        console.error("Error:", error);
                        alert("Chatbot service failed. Status: " + xhr.status);
                    }
                });
            }

            // 从UI表单中获取最新数据更新formData
            function updateFormDataFromUI() {
                // 表单元素已经通过onChange事件直接更新了formData对象
                // 由于有可能存在需要即时计算但尚未触发onChange的输入框，
                // 我们可以查找并手动触发这些输入框的更新

                // 确保基本字段（非嵌套）的值已更新
                $("#formContainer input").each(function() {
                    // 获取当前输入框的值
                    const value = $(this).val();
                    
                    // 获取所在行的字段名称（通常在第一个td中）
                    const row = $(this).closest("tr");
                    const labelCell = row.find("td:first");
                    
                    // 找到这个输入框对应的字段路径
                    // 这种方法可能不够精确，但是可以作为后备方案
                    if (labelCell.length > 0) {
                        const label = labelCell.text().trim();
                        
                        // 尝试匹配简单字段
                        for (const key of ["category", "task", "summary", "description", "conclusion"]) {
                            if (label.toLowerCase() === key.toLowerCase()) {
                                formData[key] = value;
                                break;
                            }
                        }
                        
                        // 处理根因列表
                        if (label.startsWith("Root Cause")) {
                            const index = parseInt(label.replace("Root Cause ", "")) - 1;
                            if (!isNaN(index) && index >= 0 && index < formData.root_causes.length) {
                                formData.root_causes[index] = value;
                            }
                        }
                    }
                });
                
                // 注意：动态字段和复杂结构通常已经通过各自的onChange回调更新了formData
                // 因此不需要额外处理
                
                // 打印用于调试
                console.log("Updated formData:", JSON.stringify(formData));
            }

            function mapResponseToFormData(response) {
                return {
                    category: response.Category || "",
                    task: response.Task || "",
                    summary: response.Summary || "",
                    description: response.Description || "",
                    root_causes: response.RootCauses || [],
                    conclusion: response.Conclusion || "",
                    impact_analysis: {
                        affected_module: response.ImpactAnalysis?.AffectedModule || "",
                        severity: response.ImpactAnalysis?.Severity || "",
                        priority: response.ImpactAnalysis?.Priority || "",
                        defect_phase: response.ImpactAnalysis?.DefectPhase || "",
                        dynamic_fields: response.ImpactAnalysis?.DynamicFields?.map(mapDynamicField) || []
                    },
                    resolution: {
                        fix_applied: response.Resolution?.FixApplied || "",
                        dynamic_fields: response.Resolution?.DynamicFields?.map(mapDynamicField) || []
                    },
                    preventive_measures: {
                        general_measure: response.PreventiveMeasures?.GeneralMeasure || "",
                        dynamic_fields: response.PreventiveMeasures?.DynamicFields?.map(mapDynamicField) || []
                    },
                    supplementary_info: {
                        dynamic_fields: response.SupplementaryInfo?.DynamicFields?.map(mapDynamicField) || []
                    },
                    additional_questions: {
                        dynamic_fields: response.AdditionalQuestions?.DynamicFields?.map(mapDynamicField) || []
                    }
                };
            }

            function mapDynamicField(field) {
                return {
                    key: field.Key || "",
                    value: field.Value || "",
                    type: field.Type || "string",
                    is_confirmed: field.IsConfirmed || false
                };
            }

            // Append message to chat
            function appendMessage(sender, message, messageType) {
                let chatContainer = sender === "User" ? $("#assistantMessages") : $("#userMessages");

                let messageElement = $("<div>").addClass("chat-message").addClass(messageType);
                let senderLabel = $("<strong>").text(sender + ":");
                messageElement.append(senderLabel);

                let formattedMessage;
                try {
                    let jsonObject = typeof message === "string" ? JSON.parse(message) : message;
                    formattedMessage = $("<pre>").text(JSON.stringify(jsonObject, null, 2));
                } catch (e) {
                    formattedMessage = $("<pre>").text(message);
                }

                messageElement.append(formattedMessage);
                chatContainer.append(messageElement);

                assignMessageIds();

                if (chatContainer.length) {
                    setTimeout(() => {
                        chatContainer.scrollTop(chatContainer.prop("scrollHeight"));
                    }, 50);
                }
            }

            // Form utilities
            function createInputField(value, onChange, disabled = false) {
                let input = document.createElement("input");
                input.type = "text";
                input.value = value;
                input.disabled = disabled;
                input.oninput = (e) => onChange(e.target.value);
                return input;
            }

            function createButton(text, className, onClick) {
                let button = document.createElement("button");
                button.textContent = text;
                button.className = className + " btn-action";
                button.onclick = onClick;
                return button;
            }

            function toggleSectionVisibility(sectionKey) {
                sectionStates[sectionKey].visible = !sectionStates[sectionKey].visible;
                loadForm();
            }

            function toggleSectionExpansion(sectionKey) {
                sectionStates[sectionKey].expanded = !sectionStates[sectionKey].expanded;
                loadForm();
            }

            function createSectionHeaderRow(title, sectionKey) {
                let row = document.createElement("tr");
                row.className = "section-header";

                let titleCell = document.createElement("td");
                titleCell.colSpan = 2;

                let expandIcon = document.createElement("span");
                expandIcon.textContent = sectionStates[sectionKey].expanded ? "▼ " : "► ";
                expandIcon.style.cursor = "pointer";
                expandIcon.onclick = () => toggleSectionExpansion(sectionKey);

                let titleText = document.createTextNode(title);

                titleCell.appendChild(expandIcon);
                titleCell.appendChild(titleText);

                let actionCell = document.createElement("td");

                // Add button for specific sections
                if (sectionKey === "root_causes") {
                    let addButton = createButton("Add", "btn-new", () => {
                        formData.root_causes.push("");
                        loadForm();
                    });
                    actionCell.appendChild(addButton);
                } else if (["impact_analysis", "resolution", "preventive_measures", "supplementary_info", "additional_questions"].includes(sectionKey)) {
                    let addButton = createButton("New", "btn-new", () => {
                        if (!formData[sectionKey].dynamic_fields) {
                            formData[sectionKey].dynamic_fields = [];
                        }
                        formData[sectionKey].dynamic_fields.push({ key: "New Field", value: "", type: "string", is_confirmed: true });
                        loadForm();
                    });
                    actionCell.appendChild(addButton);
                }

                row.appendChild(titleCell);
                row.appendChild(actionCell);

                row.onclick = (e) => {
                    if (e.target !== expandIcon && e.target.tagName !== 'BUTTON') {
                        toggleSectionExpansion(sectionKey);
                    }
                };

                return row;
            }

            function createFieldRow(label, value, onChange) {
                let row = document.createElement("tr");

                let labelCell = document.createElement("td");
                labelCell.textContent = label;

                let valueCell = document.createElement("td");
                let input = createInputField(value, onChange);
                valueCell.appendChild(input);

                let actionCell = document.createElement("td");

                row.appendChild(labelCell);
                row.appendChild(valueCell);
                row.appendChild(actionCell);

                return row;
            }

            function createDynamicFieldRow(field, index, groupKey) {
                let row = document.createElement("tr");

                let keyCell = document.createElement("td");
                
                // 创建包含复选框和输入框的容器
                let inputContainer = document.createElement("div");
                inputContainer.style.display = "flex";
                inputContainer.style.alignItems = "center";
                inputContainer.style.width = "100%";

                // Add visibility toggle (confirm/unconfirm) checkbox
                let visibilityToggle = document.createElement("input");
                visibilityToggle.type = "checkbox";
                visibilityToggle.checked = field.is_confirmed;
                visibilityToggle.style.marginRight = "5px";
                visibilityToggle.style.flexShrink = "0"; // 不允许复选框缩小
                visibilityToggle.style.width = "15px"; // 固定宽度
                visibilityToggle.onchange = () => {
                    formData[groupKey].dynamic_fields[index].is_confirmed = visibilityToggle.checked;
                    loadForm();
                };

                let keyInput = createInputField(field.key, (newKey) => {
                    formData[groupKey].dynamic_fields[index].key = newKey;
                }, !field.is_confirmed);
                keyInput.style.flexGrow = "1"; // 允许输入框占用剩余空间

                // 将两个元素添加到容器中，而不是直接添加到cell
                inputContainer.appendChild(visibilityToggle);
                inputContainer.appendChild(keyInput);
                
                // 将容器添加到cell
                keyCell.appendChild(inputContainer);

                let valueCell = document.createElement("td");
                let valueInput = createInputField(field.value, (newValue) => {
                    formData[groupKey].dynamic_fields[index].value = newValue;
                }, !field.is_confirmed);
                valueCell.appendChild(valueInput);

                let actionCell = document.createElement("td");
                let deleteButton = createButton("Delete", "btn-delete", () => {
                    formData[groupKey].dynamic_fields.splice(index, 1);
                    loadForm();
                });
                actionCell.appendChild(deleteButton);

                row.appendChild(keyCell);
                row.appendChild(valueCell);
                row.appendChild(actionCell);

                return row;
            }

            function createDynamicSection(groupKey, title) {
                if (!sectionStates[groupKey].visible) {
                    return [createSectionHeaderRow(title, groupKey)];
                }

                let rows = [createSectionHeaderRow(title, groupKey)];

                if (!sectionStates[groupKey].expanded) {
                    return rows;
                }

                let groupData = formData[groupKey];
                if (!groupData) return rows;

                // Basic fields
                Object.keys(groupData).forEach(key => {
                    if (key !== "dynamic_fields") {
                        rows.push(createFieldRow(
                            key.replace(/_/g, " "),
                            groupData[key],
                            (newValue) => { formData[groupKey][key] = newValue; }
                        ));
                    }
                });

                // Dynamic fields
                if (groupData.dynamic_fields) {
                    rows.push(...groupData.dynamic_fields.map((field, index) =>
                        createDynamicFieldRow(field, index, groupKey)
                    ));
                }

                return rows;
            }

            function createSimpleSection(key, title) {
                if (!sectionStates[key].visible) {
                    return [createSectionHeaderRow(title, key)];
                }

                let rows = [createSectionHeaderRow(title, key)];

                if (!sectionStates[key].expanded) {
                    return rows;
                }

                rows.push(createFieldRow(title, formData[key], (value) => {
                    formData[key] = value;
                }));

                return rows;
            }

            function createRootCausesSection() {
                if (!sectionStates.root_causes.visible) {
                    return [createSectionHeaderRow("Root Causes", "root_causes")];
                }

                let rows = [createSectionHeaderRow("Root Causes", "root_causes")];

                if (!sectionStates.root_causes.expanded) {
                    return rows;
                }

                if (!Array.isArray(formData.root_causes)) {
                    formData.root_causes = [];
                }
                if (formData.root_causes.length === 0) {
                    formData.root_causes.push("");
                }

                // Root causes items
                formData.root_causes.forEach((cause, index) => {
                    let row = document.createElement("tr");

                    let labelCell = document.createElement("td");
                    labelCell.textContent = `Root Cause ${index + 1}`;

                    let valueCell = document.createElement("td");
                    let input = createInputField(cause, (newValue) => {
                        formData.root_causes[index] = newValue;
                    });
                    valueCell.appendChild(input);

                    let actionCell = document.createElement("td");
                    if (index > 0) {
                        let deleteButton = createButton("Delete", "btn-delete", () => {
                            formData.root_causes.splice(index, 1);
                            loadForm();
                        });
                        actionCell.appendChild(deleteButton);
                    }

                    row.appendChild(labelCell);
                    row.appendChild(valueCell);
                    row.appendChild(actionCell);

                    rows.push(row);
                });

                return rows;
            }

            function loadForm() {
                // 隐藏加载动画
                $("#loader").hide();

                let formContainer = document.getElementById("formContainer");
                formContainer.innerHTML = "";

                // Append sections in order
                formContainer.append(...createSimpleSection("category", "Category"));
                formContainer.append(...createSimpleSection("task", "Task"));
                formContainer.append(...createSimpleSection("summary", "Summary"));
                formContainer.append(...createSimpleSection("description", "Description"));
                formContainer.append(...createRootCausesSection());
                formContainer.append(...createSimpleSection("conclusion", "Conclusion"));
                formContainer.append(...createDynamicSection("impact_analysis", "Impact Analysis"));
                formContainer.append(...createDynamicSection("resolution", "Resolution"));
                formContainer.append(...createDynamicSection("preventive_measures", "Preventive Measures"));
                formContainer.append(...createDynamicSection("supplementary_info", "Supplementary Info"));
                formContainer.append(...createDynamicSection("additional_questions", "Additional Questions"));
            }

            // 添加显示RCA报告的函数
            function showRCAReport(reportContent) {
                // 创建RCA报告显示窗口
                let rcaReportWindow = $("<div>").attr("id", "rcaReportWindow").addClass("rca-report-window");
                
                // 添加标题栏
                let titleBar = $("<div>").addClass("rca-report-title");
                titleBar.append($("<h3>").text("Root Cause Analysis Report (RCA)"));
                
                // 添加关闭按钮
                let closeBtn = $("<button>").html("&times;").click(function() {
                    $("#rcaReportWindow").remove();
                    $("#rcaReportOverlay").remove();
                });
                titleBar.append(closeBtn);
                
                // 添加下载按钮
                let downloadBtn = $("<button>").text("Download Report").addClass("download-btn").click(function() {
                    // 创建一个Blob对象
                    let blob = new Blob([reportContent], { type: "text/plain;charset=utf-8" });
                    
                    // 创建一个下载链接
                    let link = document.createElement("a");
                    link.href = URL.createObjectURL(blob);
                    link.download = "RCA_Report_" + new Date().toISOString().slice(0,10) + ".txt";
                    
                    // 触发下载
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                });
                titleBar.append(downloadBtn);
                
                // 添加报告内容
                let reportContentDiv = $("<div>").addClass("rca-report-content");
                
                // 确保内容中没有中文节标题
                let englishReport = reportContent;
                
                // 替换可能的中文节标题为英文
                englishReport = englishReport.replace(/# 根本原因分析报告 \(RCA\)/g, "# Root Cause Analysis Report (RCA)");
                englishReport = englishReport.replace(/## \d+\. 问题概述/g, "## 1. Problem Overview");
                englishReport = englishReport.replace(/## \d+\. 根本原因/g, "## 2. Root Causes");
                englishReport = englishReport.replace(/## \d+\. 影响分析/g, "## 3. Impact Analysis");
                englishReport = englishReport.replace(/## \d+\. 解决方案/g, "## 4. Resolution");
                englishReport = englishReport.replace(/## \d+\. 预防措施/g, "## 5. Preventive Measures");
                englishReport = englishReport.replace(/## \d+\. 补充信息/g, "## 6. Supplementary Information");
                englishReport = englishReport.replace(/## \d+\. 结论/g, "## 7. Conclusion");
                
                // 替换可能的中文字段名为英文
                englishReport = englishReport.replace(/- \*\*问题类别\*\*:/g, "- **Category**:");
                englishReport = englishReport.replace(/- \*\*任务类型\*\*:/g, "- **Task Type**:");
                englishReport = englishReport.replace(/- \*\*摘要\*\*:/g, "- **Summary**:");
                englishReport = englishReport.replace(/- \*\*详细描述\*\*:/g, "- **Detailed Description**:");
                englishReport = englishReport.replace(/- \*\*受影响模块\*\*:/g, "- **Affected Module**:");
                englishReport = englishReport.replace(/- \*\*严重程度\*\*:/g, "- **Severity**:");
                englishReport = englishReport.replace(/- \*\*优先级\*\*:/g, "- **Priority**:");
                englishReport = englishReport.replace(/- \*\*缺陷阶段\*\*:/g, "- **Defect Phase**:");
                englishReport = englishReport.replace(/- \*\*已应用修复\*\*:/g, "- **Fix Applied**:");
                englishReport = englishReport.replace(/- \*\*通用措施\*\*:/g, "- **General Measure**:");
                
                // 格式化报告内容（保留换行等格式）
                let formattedReport = englishReport.replace(/\n/g, "<br>");
                
                // 处理Markdown格式
                // 标题处理
                formattedReport = formattedReport.replace(/# (.*?)<br>/g, "<h1>$1</h1>");
                formattedReport = formattedReport.replace(/## (.*?)<br>/g, "<h2>$1</h2>");
                formattedReport = formattedReport.replace(/### (.*?)<br>/g, "<h3>$1</h3>");
                
                // 列表处理
                formattedReport = formattedReport.replace(/- (.*?)<br>/g, "<ul><li>$1</li></ul>");
                
                // 粗体处理
                formattedReport = formattedReport.replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>");
                
                reportContentDiv.html(formattedReport);
                
                // 将元素添加到窗口
                rcaReportWindow.append(titleBar);
                rcaReportWindow.append(reportContentDiv);
                
                // 创建一个遮罩层
                let overlay = $("<div>").attr("id", "rcaReportOverlay").addClass("rca-report-overlay");
                overlay.click(function(e) {
                    if (e.target === this) {
                        $("#rcaReportWindow").remove();
                        $("#rcaReportOverlay").remove();
                    }
                });
                
                // 添加到文档
                $("body").append(overlay);
                $("body").append(rcaReportWindow);
            }
        });
    </script>
}