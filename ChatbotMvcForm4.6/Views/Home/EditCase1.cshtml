@using SBF.HelpDesk.Core.Enum
@model SBF.HelpDesk.Entities.Case
@{
    ViewBag.Title = "Edit Case";
    //SelectList lstCategory = (SelectList)@ViewBag.ctg;
}
<link href="~/Content/css/loadingstyle.css" rel="stylesheet" />
<style>
    .overlay {
        background-color: rgba(255, 255, 255, .7);
    }
</style>

<div class="overlay">
    <button class="btn spinload" type="button" disabled style="background-color: #b16c84">
        <span class="spinner-border spinner" role="status" aria-hidden="true"></span>
        Loading...
    </button>
</div>
<div class="content-header">
    <div class="container-fluid">
        <div class="content-wrapper" style="background:none!important">
            @*<h4 class="m-0 text-dark">

            @SBF.HelpDesk.Core.Util.ResourceUtil.GetResourceValue(ViewBag.ResourceMasterList, SBF.HelpDesk.Core.Enum.Resource.EDIT_CASE_PAGE_TITLE)
        </h4>*@

            @*ZP add id="editForm"*@
            @using (Html.BeginForm("Index", "Case", FormMethod.Post, new { enctype = "multipart/form-data", id = "editForm" }))
            {
                @Html.HiddenFor(model => model.ID, new { @id = "caseNumberID" })
                @Html.HiddenFor(model => model.CaseNumber)
                @Html.HiddenFor(model => model.RCAReport, new { @id = "RCAReport" }) @* ZP *@

                //sonika - march 2023
                @*<div class="row form-group">
                <label class="col-md-4 col-sm-5 col-form-label text-md-right">
                    @SBF.HelpDesk.Core.Util.ResourceUtil.GetResourceValue(ViewBag.ResourceMasterList, SBF.HelpDesk.Core.Enum.Resource.REPORT_CASE_DROPDOWN__CATEGORY)
                    ENVIRONMENT
                    <span class="text-danger">*</span>
                </label>
                <div class="col-sm-6">

                </div>
            </div>*@

                <!--MK Edit start-->
                <div class="panel-group update-ticket" id="accordion" role="tablist" aria-multiselectable="true">

                    <div class="panel panel-default">
                        <div class="panel-heading" role="tab" id="updatetic">
                            <h4 class="panel-title">
                                <a class="collapsed" role="button" data-parent="#accordion" href="#updateticket" aria-expanded="false" aria-controls="updateticket">
                                    <span>
                                        UPDATE TICKET
                                    </span>
                                    <i class="fas fa-angle-down" aria-hidden="true"></i>
                                </a>
                            </h4>
                        </div>
                        @*sugan*@
                        <div id="updateticket" class="panel-collapse" role="tabpanel" aria-labelledby="updatetic">
                            <div class="panel-body">
                                <div class="row">
                                    <div class="col-md-10">
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="row form-group">
                                                    <label class="col-md-4 col-form-label text-md-rightt">
                                                        @SBF.HelpDesk.Core.Util.ResourceUtil.GetResourceValue(ViewBag.ResourceMasterList, SBF.HelpDesk.Core.Enum.Resource.REPORT_CASE_DROPDOWN_DEPARTMENT)
                                                        <span class="text-danger">*</span>
                                                    </label>
                                                    <div class="col-md-8">
                                                        @if (ViewBag.EditDepartment)
                                                        {
                                                            @Html.DropDownListFor(M => M.Department, new SelectList(Model.deptlist, "ID", "DepartmentName"), new { @class = "form-control custom-select" })
                                                        }
                                                        else
                                                        {
                                                            @Html.DropDownListFor(M => M.Department, new SelectList(Model.deptlist, "ID", "DepartmentName"), new { @class = "form-control custom-select", @disabled = "disabled" });
                                                            @Html.HiddenFor(model => model.Department)
                                                        }
                                                        @Html.ValidationMessageFor(model => model.Department,
                                                             "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="row form-group">
                                                    <label class="col-md-4 col-form-label text-md-rightt">
                                                        @SBF.HelpDesk.Core.Util.ResourceUtil.GetResourceValue(ViewBag.ResourceMasterList, SBF.HelpDesk.Core.Enum.Resource.REPORT_CASE_DROPDOWN__CATEGORY)
                                                        <span class="text-danger">*</span>
                                                    </label>
                                                    <div class="col-md-8">
                                                        @if (ViewBag.EditCategory)
                                                        {
                                                            @Html.DropDownListFor(M => M.Category, new SelectList(Model.CategoryList, "ID", "Descr"), new { @id = "ddlCategory", @class = "form-control custom-select" })
                                                        }
                                                        else
                                                        {
                                                            @Html.HiddenFor(model => model.Category)
                                                            @Html.DropDownListFor(M => M.Category, new SelectList(Model.CategoryList, "ID", "Descr"), new { @id = "ddlCategory", @class = "form-control custom-select", @disabled = "disabled" })
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                @if (@SBF.HelpDesk.Core.Util.ResourceUtil.GetReportCaseField(ViewBag.PageField, SBF.HelpDesk.Core.Enum.PageField.PRIORITY))
                                                {
                                                    <div class="row form-group">
                                                        <label class="col-md-4 col-form-label text-md-rightt">
                                                            @SBF.HelpDesk.Core.Util.ResourceUtil.GetResourceValue(ViewBag.ResourceMasterList, SBF.HelpDesk.Core.Enum.Resource.REPORT_CASE_DROPDOWN__PRIORITY)
                                                            <span class="text-danger">*</span>
                                                        </label>
                                                        <div class="col-md-8">
                                                            @if (ViewBag.EditPriority)
                                                            {
                                                                @Html.DropDownListFor(M => Model.Priority, new SelectList(Model.PriorityLists, "ID", "SeverityLevel"), new { @class = "form-control custom-select" })
                                                            }
                                                            else
                                                            {
                                                                @Html.HiddenFor(model => model.Priority)
                                                                @*@Html.DropDownListFor(M => Model.Priority, new SelectList(Model.PriorityLists, "ID", "SeverityLevel"), new { @class = "form-control custom-select" })*@
                                                                @Html.DropDownListFor(M => Model.Priority, new SelectList(Model.PriorityLists, "ID", "SeverityLevel"), new { @class = "form-control custom-select", @disabled = "disabled" })
                                                            }
                                                        </div>
                                                    </div>
                                                }

                                            </div>
                                            <div class="col-md-6">
                                                @if (@SBF.HelpDesk.Core.Util.ResourceUtil.GetReportCaseField(ViewBag.PageField, SBF.HelpDesk.Core.Enum.PageField.TASK))
                                                {
                                                    <div class="row form-group">
                                                        <label class="col-md-4 col-form-label text-md-rightt">
                                                            @SBF.HelpDesk.Core.Util.ResourceUtil.GetResourceValue(ViewBag.ResourceMasterList, SBF.HelpDesk.Core.Enum.Resource.REPORT_CASE_DROPDOWN__TASK)
                                                            <span class="text-danger">*</span>
                                                        </label>
                                                        <div class="col-md-8">
                                                            @if (ViewBag.EditTask)
                                                            {
                                                                @Html.DropDownListFor(M => M.Task, new SelectList(Model.TaskTypeLists, "ID", "TaskDescription"), new { @class = "form-control custom-select" })
                                                            }
                                                            else
                                                            {
                                                                @Html.HiddenFor(model => model.Task)
                                                                @Html.DropDownListFor(M => M.Task, new SelectList(Model.TaskTypeLists, "ID", "TaskDescription"), new { @class = "form-control custom-select", @disabled = "disabled" })
                                                            }
                                                        </div>
                                                    </div>
                                                }

                                            </div>
                                            <div class="col-md-6">
                                                @if (@SBF.HelpDesk.Core.Util.ResourceUtil.GetReportCaseField(ViewBag.PageField, SBF.HelpDesk.Core.Enum.PageField.PREFERENCE))
                                                {
                                                    <div class="row form-group">
                                                        <label class="col-md-4 col-form-label text-md-rightt">
                                                            @SBF.HelpDesk.Core.Util.ResourceUtil.GetResourceValue(ViewBag.ResourceMasterList, SBF.HelpDesk.Core.Enum.Resource.REPORT_CASE_DROPDOWN_PREFERENCE)
                                                            <span class="text-danger">*</span>
                                                        </label>
                                                        <div class="col-md-8">
                                                            @if (ViewBag.EditPreference)
                                                            {
                                                                @Html.DropDownListFor(M => Model.PREFERENCE, new SelectList(Model.PreferenceLevel, "ID", "PreferenceLevelType"), new { @class = "form-control custom-select" })
                                                            }
                                                            else
                                                            {
                                                                @Html.HiddenFor(model => model.PREFERENCE)
                                                                @*@Html.DropDownListFor(M => Model.Priority, new SelectList(Model.PriorityLists, "ID", "SeverityLevel"), new { @class = "form-control custom-select" })*@
                                                                @Html.DropDownListFor(M => Model.PREFERENCE, new SelectList(Model.PreferenceLevel, "ID", "PreferenceLevelType"), new { @class = "form-control custom-select", @disabled = "disabled" })
                                                            }
                                                        </div>
                                                    </div>
                                                }

                                            </div>
                                            <div class="col-md-6">
                                                @if (@SBF.HelpDesk.Core.Util.ResourceUtil.GetReportCaseField(ViewBag.PageField, SBF.HelpDesk.Core.Enum.PageField.DEFECT))
                                                {
                                                    <div class="row form-group">
                                                        <label class="col-md-4 col-form-label text-md-rightt">
                                                            @SBF.HelpDesk.Core.Util.ResourceUtil.GetResourceValue(ViewBag.ResourceMasterList, SBF.HelpDesk.Core.Enum.Resource.REPORT_CASE_DROPDOWN_DEFECT)
                                                            <span class="text-danger">*</span>
                                                        </label>
                                                        <div class="col-md-8">
                                                            @if (ViewBag.EditDefectPhase)
                                                            {
                                                                @Html.DropDownListFor(M => Model.DefectPhaseID, new SelectList(Model.DefectPhaseList, "ID", "DefectPhase"), new { @class = "form-control custom-select" })
                                                            }
                                                            else
                                                            {
                                                                @Html.HiddenFor(model => model.DefectPhaseID)
                                                                @*@Html.DropDownListFor(M => Model.Priority, new SelectList(Model.PriorityLists, "ID", "SeverityLevel"), new { @class = "form-control custom-select" })*@
                                                                @Html.DropDownListFor(M => Model.DefectPhaseID, new SelectList(Model.DefectPhaseList, "ID", "DefectPhase"), new { @class = "form-control custom-select", @disabled = "disabled" })
                                                            }
                                                        </div>
                                                    </div>
                                                }

                                            </div>
                                            <div class="col-md-6">
                                                @if (@SBF.HelpDesk.Core.Util.ResourceUtil.GetReportCaseField(ViewBag.PageField, SBF.HelpDesk.Core.Enum.PageField.REPORTED_BY))
                                                {
                                                    <div class="row form-group">
                                                        <label class="col-md-4 col-form-label text-md-rightt">
                                                            TICKET OWNER
                                                            <span class="text-danger">*</span>
                                                        </label>
                                                        <div class="col-md-8">
                                                            @if (ViewBag.EditName)
                                                            {
                                                                @Html.TextBoxFor(m => Model.Name, new { @id = "Name", @class = "form-control", required = "required" })
                                                            }
                                                            else
                                                            {
                                                                @Html.HiddenFor(model => model.Name)
                                                                @Html.TextBoxFor(m => Model.Name, new { @id = "Name", @class = "form-control", required = "required", @disabled = "disabled" })
                                                            }
                                                        </div>
                                                    </div>
                                                }

                                            </div>
                                            <div class="col-md-6">
                                                @if (@SBF.HelpDesk.Core.Util.ResourceUtil.GetReportCaseField(ViewBag.PageField, SBF.HelpDesk.Core.Enum.PageField.EMAIL))
                                                {
                                                    <div class="row form-group">
                                                        <label class="col-md-4 col-form-label text-md-rightt">
                                                            @SBF.HelpDesk.Core.Util.ResourceUtil.GetResourceValue(ViewBag.ResourceMasterList, SBF.HelpDesk.Core.Enum.Resource.REPORT_CASE_TEXTBOX_EMAIL)
                                                            <span class="text-danger">*</span>
                                                        </label>
                                                        <div class="col-md-8">
                                                            @if (ViewBag.EditEmail)
                                                            {
                                                                @Html.TextBoxFor(m => Model.Email, new { @id = "Email", @class = "form-control", required = "required" })
                                                            }
                                                            else
                                                            {
                                                                @Html.HiddenFor(model => model.Email)
                                                                @Html.TextBoxFor(m => Model.Email, new { @id = "Email", @class = "form-control", required = "required", @disabled = "disabled" })
                                                            }
                                                        </div>
                                                    </div>
                                                }

                                            </div>
                                            <div class="col-md-6">
                                                @if (@SBF.HelpDesk.Core.Util.ResourceUtil.GetReportCaseField(ViewBag.PageField, SBF.HelpDesk.Core.Enum.PageField.CONTACTNO))
                                                {
                                                    <div class="row form-group">
                                                        <label class="col-md-4 col-form-label text-md-rightt">
                                                            @SBF.HelpDesk.Core.Util.ResourceUtil.GetResourceValue(ViewBag.ResourceMasterList, SBF.HelpDesk.Core.Enum.Resource.REPORT_CASE_TEXTBOX_CONTACTNO)
                                                            <span class="text-danger">*</span>
                                                        </label>
                                                        <div class="col-md-8">
                                                            @if (ViewBag.EditContact)
                                                            {
                                                                @Html.TextBoxFor(m => Model.Contact, new
                                                                {
                                                                    @id = "Contact",
                                                                    @class = "form-control"@*, required = "required"*@})
                                                            }
                                                            else
                                                            {
                                                                @Html.HiddenFor(model => model.Contact)
                                                                @Html.TextBoxFor(m => Model.Contact, new
                                                                {
                                                                    @id = "Contact",
                                                                    @class = "form-control"@*, required = "required"*@,
@disabled = "disabled"
})
                                                            }
                                                        </div>
                                                    </div>
                                                }

                                            </div>
                                            <div class="col-md-6">
                                                @if (@SBF.HelpDesk.Core.Util.ResourceUtil.GetReportCaseField(ViewBag.PageField, SBF.HelpDesk.Core.Enum.PageField.ASSIGNED_TO) && !WebSessions.User.PermissionIDFK.Equals(Convert.ToInt16(Role.User)))
                                                {
                                                    <div class="row form-group">
                                                        <label class="col-md-4 col-form-label text-md-rightt">
                                                            @SBF.HelpDesk.Core.Util.ResourceUtil.GetResourceValue(ViewBag.ResourceMasterList, SBF.HelpDesk.Core.Enum.Resource.EDIT_CASE_ASSIGNEDTO)
                                                            <span class="text-danger">*</span>
                                                        </label>
                                                        <div class="col-md-8">
                                                            @if (ViewBag.EditAssignedTo)
                                                            {
                                                                @Html.DropDownListFor(M => M.AssignedTo, new SelectList(Model.UserList, "ID", "FullName"), "----UnAssigned----", new { @id = "ddlUserAssigned", @class = "form-control custom-select" })
                                                            }
                                                            else
                                                            {
                                                                @Html.HiddenFor(model => model.AssignedTo)
                                                                @Html.DropDownListFor(M => M.AssignedTo, new SelectList(Model.UserList, "ID", "FullName"), "----UnAssigned----", new { @id = "ddlUserAssigned", @class = "form-control custom-select", @disabled = "disabled" })
                                                            }
                                                        </div>
                                                    </div>
                                                }

                                            </div>
                                            <div class="col-md-12">
                                                @if (@SBF.HelpDesk.Core.Util.ResourceUtil.GetReportCaseField(ViewBag.PageField, SBF.HelpDesk.Core.Enum.PageField.SUMMARY))
                                                {
                                                    <div class="row form-group">
                                                        <label class="col-md-2 col-form-label text-md-rightt">
                                                            @SBF.HelpDesk.Core.Util.ResourceUtil.GetResourceValue(ViewBag.ResourceMasterList, SBF.HelpDesk.Core.Enum.Resource.REPORT_CASE_TEXTBOX_SUMMARY)
                                                            <span class="text-danger">*</span>
                                                        </label>
                                                        <div class="col-md-10">
                                                            @if (ViewBag.EditSummary)
                                                            {
                                                                @Html.TextBoxFor(m => Model.Summary, new { @id = "Summary", @class = "form-control", required = "required" })
                                                            }
                                                            else
                                                            {
                                                                @Html.HiddenFor(model => model.Summary)
                                                                @Html.TextBoxFor(m => Model.Summary, new { @id = "Summary", @class = "form-control", required = "required", @disabled = "disabled" })
                                                            }
                                                        </div>
                                                    </div>
                                                }

                                            </div>
                                            <div class="col-md-12">
                                                @if (@SBF.HelpDesk.Core.Util.ResourceUtil.GetReportCaseField(ViewBag.PageField, SBF.HelpDesk.Core.Enum.PageField.DESCRIPTION))
                                                {
                                                    <div class="row form-group">
                                                        <label class="col-md-2 col-form-label text-md-rightt">
                                                            @SBF.HelpDesk.Core.Util.ResourceUtil.GetResourceValue(ViewBag.ResourceMasterList, SBF.HelpDesk.Core.Enum.Resource.REPORT_CASE_TEXTBOX__DESCRIPTION)
                                                            <span class="text-danger">*</span>
                                                        </label>
                                                        <div class="col-md-10">
                                                            @if (ViewBag.EditDescription)
                                                            {
                                                                @Html.TextAreaFor(m => Model.Description, new { @class = "form-control", required = "required", @id = "ddlDescription" })
                                                            }
                                                            else
                                                            {
                                                                @Html.HiddenFor(model => model.Description)
                                                                @Html.TextAreaFor(m => Model.Description, new { @class = "form-control", required = "required", @disabled = "disabled", @id = "ddlDescription" })

                                                            }
                                                        </div>
                                                    </div>
                                                }

                                            </div>

                                            <div class="col-md-6">
                                                @if (@SBF.HelpDesk.Core.Util.ResourceUtil.GetReportCaseField(ViewBag.PageField, SBF.HelpDesk.Core.Enum.PageField.CASE_STATUS))
                                                {
                                                    <div class="row form-group">
                                                        <label class="col-md-4 col-form-label text-md-rightt">
                                                            @SBF.HelpDesk.Core.Util.ResourceUtil.GetResourceValue(ViewBag.ResourceMasterList, SBF.HelpDesk.Core.Enum.Resource.EDIT_CASE_CHANGE_STATUS_TO)
                                                            <span class="text-danger">*</span>
                                                        </label>
                                                        <div class="col-md-8">
                                                            @if (ViewBag.EditStatus)
                                                            {
                                                                @Html.DropDownListFor(M => M.Status, new SelectList(Model.CaseStatusList, "ID", "Descr"), new { @id = "ddlCaseStatus", @class = "form-control custom-select" })
                                                            }
                                                            else
                                                            {
                                                                @Html.DropDownListFor(M => M.Status, new SelectList(Model.CaseStatusList, "ID", "Descr"), new { @id = "ddlCaseStatus", @class = "form-control custom-select", @disabled = "disabled" })
                                                                @Html.HiddenFor(model => model.Status)
                                                            }
                                                        </div>
                                                    </div>
                                                }

                                            </div>
                                            <div class="col-md-6">
                                                <div class="row form-group">
                                                    <label class="col-md-4 col-form-label text-md-rightt">
                                                        @SBF.HelpDesk.Core.Util.ResourceUtil.GetResourceValue(ViewBag.ResourceMasterList, SBF.HelpDesk.Core.Enum.Resource.REPORT_CASE_DROPDOWN_RCA)
                                                        <span class="text-danger">*</span>
                                                    </label>
                                                    <div class="col-md-8">
                                                        @if (ViewBag.EditRCA)
                                                        {
                                                            @Html.DropDownListFor(M => Model.RCAID, new SelectList(Model.RCAList, "ID", "RCAName"),
                                                           "----Select RCA----", new
                                                           {
                                                               @id = "ddlRCA",
                                                               @class = "form-control custom-select",
                                                               required = "reuired"
                                                           }
                                                          )
                                                        }
                                                        else
                                                        {
                                                            @Html.HiddenFor(model => model.RCAID)
                                                            @Html.DropDownListFor(M => Model.RCAID, new SelectList(Model.RCAList, "ID", "RCAName"), new { @class = "form-control custom-select", @disabled = "disabled" })
                                                        }
                                                    </div>

                                                    @*ZP add View RCA report btn*@
                                                    <button id="viewRCAReportBtn" class="btn btn-success btn-sm" style="margin-top: 10px; margin-left: 5px;">View RCA Report</button>
                                                </div>

                                            </div>

                                            <div class="col-md-6">
                                                @if (@SBF.HelpDesk.Core.Util.ResourceUtil.GetReportCaseField(ViewBag.PageField, SBF.HelpDesk.Core.Enum.PageField.RESOLUTION_DATE))
                                                {
                                                    <div class="row form-group">
                                                        <label class="col-md-4 col-form-label text-md-rightt">
                                                            @SBF.HelpDesk.Core.Util.ResourceUtil.GetResourceValue(ViewBag.ResourceMasterList, SBF.HelpDesk.Core.Enum.Resource.EDIT_CASE_ADD_RESOLUTION_DATE)
                                                            <span class="text-danger">*</span>
                                                        </label>
                                                        <div class="col-md-8">
                                                            @if ((WebSessions.User.PermissionIDFK == 5))
                                                            {
                                                                @Html.TextBoxFor(m => Model.ResolutionDt, new { @class = "form-control datepicker", required = "required", @id = "datepicker", placeholder = "dd-mm-yyyy", data_min_date = "-30" })
                                                            }
                                                            else
                                                            {
                                                                @Html.TextBoxFor(m => Model.ResolutionDt, new { @class = "form-control datepicker", required = "required", @id = "datepicker", placeholder = "dd-mm-yyyy", data_min_date = "-30" })
                                                            }
                                                        </div>

                                                    </div>
                                                }

                                            </div>
                                            <div class="col-md-6">
                                                @if (@SBF.HelpDesk.Core.Util.ResourceUtil.GetReportCaseField(ViewBag.PageField, SBF.HelpDesk.Core.Enum.PageField.RESOLUTION_DATE))
                                                {
                                                    <div class="row form-group">

                                                        @*sugan*@
                                                        <label class="col-sm-4 col-form-label">
                                                            @SBF.HelpDesk.Core.Util.ResourceUtil.GetResourceValue(ViewBag.ResourceMasterList, SBF.HelpDesk.Core.Enum.Resource.REPORT_CASE_DROPDOWN__LINK_TICKET)
                                                        </label>
                                                        <div class="col-sm-8">
                                                            @if (ViewBag.Linkedcases)
                                                            {
                                                                var multiTicketSelectList = Model.LinkTicketList != null ? new MultiSelectList(Model.LinkTicketList, "ID", "CaseNumber", Model.LinkTicket) : null;

                                                                @Html.ListBoxFor(m => m.LinkTicket, multiTicketSelectList, new { @id = "ddlLinkTicket", @class = "form-control custom-select" })
                                                                @Html.HiddenFor(m => m.ID)
                                                            }
                                                        </div>
                                                    </div>
                                                }

                                            </div>
                                            <div class="col-12">
                                                <div class="text-right clearfix">

                                                    <input type="submit" id="btnSubmit" class="btn btn-primary btn-theme btn-sm" value="@SBF.HelpDesk.Core.Util.ResourceUtil.GetResourceValue(ViewBag.ResourceMasterList, SBF.HelpDesk.Core.Enum.Resource.EDIT_CASE_BUTTON_UPDATE)" />
                                                    &nbsp; &nbsp;
                                                    <input type="submit" class="btn btn-primary btn-theme-rounded btn-sm" id="CancelEditCase" name="CancelEditCase" value="CANCEL" formnovalidate="true" />
                                                </div>
                                            </div>

                                        </div>
                                    </div>
                                </div>

                            </div>
                        </div>
                    </div>

                </div>

                <!--MK Edit End-->
            }



            @*<div class="container-fluid py-3 h-100">*@

            <div class="comment-tabs">
                <!-- tabs -->
                <ul class="nav nav-tabs" role="tablist">
                    <li role="presentation" class="nav-item">
                        <a href="#messages" aria-controls="messages" role="tab" data-toggle="tab" class="nav-link active">Updated / Comments</a>
                    </li>
                    <li role="presentation" class="nav-item">
                        <a href="#Attachments" aria-controls="Attachments" role="tab" data-toggle="tab" class="nav-link">Files / Attachments</a>
                    </li>
                    <li role="presentation" class="nav-item">
                        <a href="#Activity" aria-controls="Activity" role="tab" data-toggle="tab" class="nav-link">Activity Logs</a>
                    </li>
                </ul>
                <div class="tab-content mh-100">
                    <div role="tabpanel" class="tab-pane active py-3 mh-100" id="messages">
                        @*<div id="div_editor1">

                    </div>*@
                        @*<label class="col-form-label text-md-right" style="color: black; font-size: larger; font-weight: bold;">
                        Ticket Notes
                    </label>*@
                        <div class="" style="margin-bottom: 20px;">
                            <a class="btn btn-primary btn-theme btn-sm" role="button" data-toggle="collapse" href="#collapsecommentBox" aria-expanded="false" aria-controls="collapseExample">
                                <i class="right fas fa-plus" aria-hidden="true"></i><i class="right fas fa-minus" aria-hidden="true"></i> Comments / Notes
                            </a>

                            <div class="collapse" id="collapsecommentBox" style="margin-top:15px">
                                <div class="">
                                    @if (@SBF.HelpDesk.Core.Util.ResourceUtil.GetReportCaseField(ViewBag.PageField, SBF.HelpDesk.Core.Enum.PageField.NOTE))
                                    {
                                        <div class="row form-group">
                                            <div class="col-md-7">
                                                @Html.TextAreaFor(m => Model.CaseNote, new { @class = "form-control", id = "CommentTextareaId" })
                                                <div class="col-md-12">
                                                    @if (@SBF.HelpDesk.Core.Util.ResourceUtil.GetReportCaseField(ViewBag.PageField, SBF.HelpDesk.Core.Enum.PageField.UPLOAD_FILES))
                                                    {
                                                        <div class="row form-group">
                                                            <label class=" col-form-label px-0 mr-3">
                                                                @SBF.HelpDesk.Core.Util.ResourceUtil.GetResourceValue(ViewBag.ResourceMasterList, SBF.HelpDesk.Core.Enum.Resource.REPORT_CASE__UPLOAD_FILES)
                                                                @*<span class="text-danger">*</span>*@
                                                            </label>

                                                            @*sugan*@
                                                            <div id="fileUploadContainer">
                                                                @*<p class="d-flex" style="margin-left: 14px;" id="addDynamicFile">

                                                                <label for="uploads1">
                                                                    <input id="officer_upload_1" class="files input-group-text" name="files" type="file" value="Browse" onchange="uploadOfficerAttachment(this)">
                                                                </label><a id="add1" style="color: blue;margin-left:10px; text-decoration: underline; cursor: pointer;" onclick="addFileUpload()">Add</a>

                                                            </p>*@
                                                                <p class="d-flex" style="margin-left: 14px;" id="addDynamicFile">
                                                                    <label for="uploads1">
                                                                        <input id="officer_upload_1" class="files input-group-text" name="files" type="file" value="Browse" onchange="uploadOfficerAttachment(this)" />
                                                                    </label>&nbsp;<a id="add1" style="color: blue; text-decoration: underline; cursor: pointer;">Add</a> <br>
                                                                </p>
                                                            </div>


                                                        </div>
                                                        @*</div>*@
                                                    }

                                                </div>
                                                <div class="text-right">
                                                    <button id="submitBtn" class="btn btn-primary btn-theme btn-sm">Save</button>

                                                </div>
                                                <div class="popup">
                                                    <p>Comments/Notes saved successfully!</p>
                                                </div>
                                            </div>
                                        </div>
                                    }

                                </div>
                            </div>
                        </div>

                        <table id="NotesTable" class="table table-striped table-bordered">
                            <thead>
                                <tr>
                                    <th>Notes</th>
                                    <th>Created By</th>
                                    <th style="width: 15%">Created Date</th>
                                    <th style="width: 5%"><center>Actions</center></th>
                                </tr>
                            </thead>
                        </table>
                    </div>
                    <div role="tabpanel" class="tab-pane py-3 mh-100" id="Attachments">
                        <label class="col-md-4 col-sm-5 col-form-label text-md-right" style="color: black; font-size: larger; font-weight: bold;">
                            Ticket Attachments
                        </label>
                        <table id="CaseAttachmentsTable" class="table table-striped table-bordered" style="width:100%">
                            <thead style="width:100%">
                                <tr>
                                    <th style="width: 60%">File Name</th>
                                    <th style="width: 25%">Uploaded By</th>
                                    <th style="width: 15%">Uploaded Date</th>
                                </tr>
                            </thead>
                        </table>
                    </div>
                    <div role="tabpanel" class="tab-pane py-3 mh-100" id="Activity">
                        <label class="col-md-4 col-sm-5 col-form-label text-md-right" style="color: black; font-size: larger; font-weight: bold;">
                            Ticket History
                        </label>
                        <table id="CaseHistoryTable" class="table table-striped table-bordered" style="width:100%">
                            <thead style="width:100%">
                                <tr>
                                    <th style="width: 25%">Field</th>
                                    <th style="width: 35%">Change</th>
                                    <th style="width: 25%">Created By</th>
                                    <th style="width: 15%">Created Date</th>
                                </tr>
                            </thead>
                        </table>
                    </div>
                </div>
            </div>

            <!--ZP 5/6/2025 -->
            <!-- Chatbot Window -->
            <div id="chatbotWindow" style="display: none;">
                <!-- Loader -->
                <div id="loader" class="loader-container">
                    <div class="loader"></div>
                    <div class="loader-text">Sending your case to AI...</div>
                </div>

                <div id="chatbotHeader">
                    <h3>Chatbot Helper</h3>
                    <button id="closeChatbot">✖</button>
                </div>

                <div id="chatbotTitle">Chatbot history</div>
                <div id="chatContainer">
                    <div id="chatMessages">
                        <div id="userMessages" class="messages-container"></div>
                        <div id="assistantMessages" class="messages-container"></div>
                    </div>
                    <div id="messageControls">
                        <button id="prevMessage">⬆</button>
                        <button id="nextMessage">⬇</button>
                    </div>
                </div>

                <div id="inputTitle">
                    <span>Provide more details about this case below</span>
                    <div class="section-controls">
                        <button id="expandAllBtn">Expand All</button>
                        <button id="collapseAllBtn">Collapse All</button>
                    </div>
                </div>
                <div id="chatbot-input-area">
                    <table id="formTable">
                        <thead>
                            <tr>
                                <th>Field</th>
                                <th>Value</th>
                                <th>Manipulations</th>
                            </tr>
                        </thead>
                        <tbody id="formContainer">
                            <!-- Dynamic form content will be loaded here -->
                        </tbody>
                    </table>
                </div>
                <div id="chatbot-controls">
                    <button id="sendBtn" class="btn-action">Send</button>
                    <button id="confirmBtn" class="btn-action">Confirm</button>
                </div>
            </div>

            @*</div>*@
        </div>
    </div>
</div>

<style>
    div.dataTables_wrapper div.dataTables_filter input {
        margin-left: 0.5em;
        margin-top: 3px;
        display: inline-block;
        width: auto;
    }

    div#NotesTable_length {
        float: right;
        padding: 6px;
        margin-right: 18px;
    }

    div#CaseHistoryTable_length {
        float: right;
        padding: 6px;
        margin-right: 18px;
    }

    div#CaseAttachmentsTable_length {
        float: right;
        padding: 6px;
        margin-right: 18px;
    }

    .redClass {
        background-color: #fcbdbd;
    }

    .greenClass {
        background-color: #d2f5b0;
    }

    .popup {
        display: none;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: white;
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 5px;
        box-shadow: 0 0 10px rgba(0,0,0,0.2);
    }

    /* chatbot styles */
    #chatbotWindow {
        display: none;
        position: fixed;
        width: 60%;
        height: 90%;
        background: #fff;
        border: 1px solid #ccc;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
        z-index: 10;
        flex-direction: column;
        overflow: hidden;
    }

    /* Header */
    #chatbotHeader {
        display: flex;
        justify-content: space-between;
        align-items: center;
        background: #f0f0f0;
        padding: 8px;
        cursor: move;
    }

    #closeChatbot {
        border: none;
        background: none;
        cursor: pointer;
        font-size: 16px;
    }
    /* Loading animation style */
    .loader-container {
        display: none;
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 255, 255, 0.8);
        z-index: 9999;
        justify-content: center;
        align-items: center;
        flex-direction: column;
    }

    .loader {
        border: 5px solid #f3f3f3;
        border-top: 5px solid #3498db;
        border-radius: 50%;
        width: 50px;
        height: 50px;
        animation: spin 2s linear infinite;
        margin-bottom: 15px;
    }

    .loader-text {
        font-size: 18px;
        color: #333;
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }
    /* Chat section */
    #chatbotTitle {
        background: #f0f0f0;
        padding: 5px;
        font-weight: bold;
    }

    #chatContainer {
        height: 200px;
        border-bottom: 1px solid #ccc;
        overflow: hidden;
        position: relative;
    }

    #chatMessages {
        height: 190px;
        overflow-y: auto;
        background: #f8f9fa;
        display: flex;
        flex-direction: column;
    }

    .messages-container {
        padding: 5px;
    }

    .user-message, .ai-message {
        margin: 5px 0;
        padding: 5px;
        border-radius: 3px;
    }

    .user-message {
        background-color: #e6f0ff;
    }

    .ai-message {
        background-color: #e6ffe6;
    }

    #messageControls {
        position: absolute;
        right: 5px;
        top: 5px;
    }

        #messageControls button {
            margin: 0 2px;
            padding: 2px 5px;
            background: #f0f0f0;
            border: 1px solid #ccc;
            border-radius: 3px;
        }

    /* Form section */
    #inputTitle {
        background: #f0f0f0;
        padding: 5px;
        font-weight: bold;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .section-controls button {
        margin-left: 5px;
        padding: 2px 5px;
        background: #f0f0f0;
        border: 1px solid #ccc;
        border-radius: 3px;
        font-size: 12px;
    }

    #chatbot-input-area {
        flex-grow: 1;
        overflow-y: auto;
        padding: 5px;
    }

    #formTable {
        width: 100%;
        border-collapse: collapse;
    }

        #formTable thead {
            position: sticky;
            top: 0;
            background: #fff;
            z-index: 1;
        }

    th, td {
        border: 1px solid #ddd;
        padding: 5px;
        text-align: left;
    }

    th {
        background: #f2f2f2;
    }
    /* Decrease the first and third columns accordingly */
    table th:first-child,
    table td:first-child {
        width: 35%;
    }

    table th:last-child,
    table td:last-child {
        width: 15%;
    }
    /* Increase the width ratio of the second column (Value). */
    table th:nth-child(2),
    table td:nth-child(2) {
        width: 50%;
    }

    /* The input box style for the first column */
    table td:nth-child(1) input[type="text"] {
        width: 95%;
        box-sizing: border-box;
        padding: 3px;
    }

    /* The input box style for the second column */
    table td:nth-child(2) input[type="text"] {
        width: 100%;
        box-sizing: border-box;
        padding: 3px;
    }



    /* Controls */
    #chatbot-controls {
        padding: 8px;
        text-align: center;
        background: #f0f0f0;
    }

    .btn-action {
        padding: 5px 10px;
        margin: 0 5px;
        cursor: pointer;
    }

    /* Utility */
    .hidden {
        display: none;
    }

    .section-header {
        background: #f5f5f5;
        cursor: pointer;
    }

    .visibility-toggle {
        margin-left: 5px;
        cursor: pointer;
    }

    /* RCA Report Window Styles */
    .rca-report-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1000;
    }

    .rca-report-window {
        position: fixed;
        top: 10%;
        left: 15%;
        width: 70%;
        height: 80%;
        background-color: #fff;
        z-index: 1001;
        border-radius: 5px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
        display: flex;
        flex-direction: column;
        overflow: hidden;
    }

    .rca-report-title {
        display: flex;
        justify-content: space-between;
        align-items: center;
        background-color: #f0f0f0;
        padding: 10px 15px;
        border-bottom: 1px solid #ccc;
    }

        .rca-report-title h3 {
            margin: 0;
        }

        .rca-report-title button {
            background: none;
            border: none;
            cursor: pointer;
            font-size: 16px;
        }

    .download-btn {
        background-color: #4CAF50 !important;
        color: white !important;
        padding: 5px 10px !important;
        border-radius: 3px !important;
        margin-right: 10px !important;
    }

    .rca-report-content {
        flex: 1;
        padding: 15px;
        overflow-y: auto;
        line-height: 1.5;
    }

        .rca-report-content h1 {
            font-size: 24px;
            margin-top: 0;
        }

        .rca-report-content h2 {
            font-size: 20px;
            margin-top: 20px;
        }

        .rca-report-content h3 {
            font-size: 18px;
        }

        .rca-report-content ul {
            margin: 5px 0;
            padding-left: 20px;
        }

        .rca-report-content li {
            margin-bottom: 5px;
        }
</style>
<!-- Include jQuery -->
<script src="https://code.jquery.com/jquery-3.6.4.min.js" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment-timezone/0.5.36/moment-timezone.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment-timezone/0.5.36/moment-timezone-with-data.min.js"></script>

<link href="https://cdn.datatables.net/1.10.15/css/dataTables.bootstrap.min.css" rel="stylesheet" />
<link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" />
<link href="https://cdn.datatables.net/1.10.19/css/jquery.dataTables.min.css" rel="stylesheet" />
<script src="https://cdn.datatables.net/1.10.15/js/dataTables.bootstrap.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<script src="https://cdn.datatables.net/1.10.19/js/jquery.dataTables.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.18.1/moment.min.js"></script>

<!-- Include jQuery library -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<!-- Include jQuery UI library -->
<link rel="stylesheet" href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js"></script>

<!-- Include summernote -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote-bs4.min.css">
<script src="https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote-bs4.min.js"></script>
<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/v/dt/dt-1.10.18/b-1.5.4/b-html5-1.5.4/datatables.min.css" />
<script type="text/javascript" src="https://cdn.datatables.net/v/dt/dt-1.10.18/b-1.5.4/b-html5-1.5.4/datatables.min.js"></script>
<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>

<script>
    $(function () {
        var minDate = $("#datepicker").data("min-date");
        $("#datepicker").datepicker({
            //beforeShow: function () {
            //    jQuery(this).datepicker({ minDate: -30 });
            //},
            minDate: minDate,
            altFormat: "dd-mm-yy",
            dateFormat: "dd-mm-yy"
        });
    });
    $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
        $($.fn.dataTable.tables(true)).DataTable()
            .columns.adjust();
    });
</script>
<script>
    var fileUploadCount = 1;

    function addFileUpload() {
        if (fileUploadCount < 4) {  // Check if total count is less than 4
            fileUploadCount++;

            var newFileUpload = document.createElement('p');
            newFileUpload.className = 'd-flex';
            newFileUpload.style = 'margin-left:14px';
            newFileUpload.innerHTML = `
                    <label for="uploads${fileUploadCount}">
                        <input id="officer_upload_${fileUploadCount}" class="files input-group-text" name="files" type="file" value="Browse" onchange="uploadOfficerAttachment(this)" />
                    </label>&nbsp;<a id="add${fileUploadCount}" style="color: blue; text-decoration: underline; cursor: pointer;" onclick="removeFileUpload(this)">Remove</a>  <br>
                `;

            document.getElementById('fileUploadContainer').appendChild(newFileUpload);
        }
    }

    function removeFileUpload(element) {
        var container = document.getElementById('fileUploadContainer');
        var parentP = element.closest('p');

        if (parentP) {
            container.removeChild(parentP);
            // Decrement the count if you want to reuse it for adding again
            fileUploadCount--;
        }
    }
</script>

<script>
     //sonika - ajax method trigged on click to add case notes
    $("#addCaseNote").click(function () {
        $('#Resolutiondate').hide();

        $('#datepicker').removeAttr('required');
        // Make an AJAX request to the controller method
        var casenote = $('#CaseNoteVal').val();
        var caseID = $("#caseNumberID").val();
        if (casenote == null || casenote == "") {
            alert("Please enter case note");
            return;
            window.location.reload();
        }
        $.ajax({
            url: '@Url.Action("InsertCaseNote", "Case")',
            type: "POST",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            data: JSON.stringify({
                caseID: caseID,
                caseNote: casenote
            }),
            success: function (response) {
                // Handle the success response from the controller method
                if (response == "Success") {
                    var editCaseUrl = '@Url.Action("EditCase", "Dashboard")?CaseID=' + parseInt(caseID);
                    // Redirect to the EditCase page
                    window.location.href = editCaseUrl;
                }
                console.log("Case note added successfully.");
                // You can perform any further actions here, such as updating the UI
            }
        });
    });
</script>

<script>
    //ZP
    //The chatbotwindow triggers the definition of the new location, before the call
    function TriggerChatbotWindow() {
        //isChatbotFinished = false;

        // Get dropdown values
        var category = $("#ddlCategory option:selected").text();
        var severity = $("#Priority option:selected").text();//Here severity variable is decided by Priority property of Case
        var task = $("#Task option:selected").text();
        var priority = $("#PREFERENCE option:selected").text();//Here priority variable by PREFERENCE property of Case
        var defectPhase = $("#DefectPhaseID option:selected").text();
        var summary = $("#Summary").val();
        //decode
        var Description = $("#ddlDescription").summernote('code');
        var issueDesc = $("<div>").html(Description).text();
        if (issueDesc.trim() === "") {
            alert("Please enter an issue description.");
            return;
        }
        var rootCause = $("#ddlRCA option:selected").text();
        $("#chatbotWindow").css("display", "flex").show();

        // Now position it after making it visible
        const windowHeight = $(window).height();
        const windowWidth = $(window).width();
        const chatbotHeight = $("#chatbotWindow").outerHeight();
        const chatbotWidth = $("#chatbotWindow").outerWidth();

        // Calculate position - ensure at least 50px from top
        const topPosition = Math.max(50, (windowHeight - chatbotHeight) / 2);
        const leftPosition = (windowWidth - chatbotWidth) / 2;

        // Set position directly without the jQuery UI position method
        // which can cause the leftward shift issue
        $("#chatbotWindow").css({
            "top": topPosition + "px",
            "left": leftPosition + "px",
            "transform": "none" // Remove any transform that might cause shifting
        });

        $('#btnSubmit').prop("disabled", true);

        $("#loader").css("display", "flex").show();

        // Initialize formData - 这些字段虽然不显示，但数据仍然保留
        formData = {
            category: category,
            task: task,
            summary: summary,
            description: issueDesc,
            root_causes: [rootCause],
            conclusion: "",
            impact_analysis: {
                affected_module: "",
                severity: severity,
                priority: priority,
                defect_phase: defectPhase,
                dynamic_fields: []
            },
            resolution: { fix_applied: "", dynamic_fields: [] },
            preventive_measures: { general_measure: "", dynamic_fields: [] },
            supplementary_info: { dynamic_fields: [] },
            additional_questions: { dynamic_fields: [] }
        };

        // Initialize section states - 保持字段的状态跟踪
        sectionStates = {
            category: { expanded: true, visible: false },  // 设置为不可见
            task: { expanded: true, visible: false },      // 设置为不可见
            summary: { expanded: true, visible: false },   // 设置为不可见
            description: { expanded: true, visible: false },  // 设置为不可见
            root_causes: { expanded: true, visible: true },
            conclusion: { expanded: true, visible: true },
            impact_analysis: { expanded: true, visible: true },
            resolution: { expanded: true, visible: true },
            preventive_measures: { expanded: true, visible: true },
            supplementary_info: { expanded: true, visible: true },
            additional_questions: { expanded: true, visible: true }
        };

        loadForm();
        sendMessage(isFinal);
    }
</script>

<script type="text/javascript">

    $(document).ready(function () {
        //sugan
        //$('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
        //    $($.fn.dataTable.tables(true)).DataTable()
        //        .columns.adjust();
        //});
        
        // Add a debug button
        $("<button>")
            .attr("type", "button")
            .addClass("btn btn-info btn-sm")
            .text("Check RCAReport")
            .css({
                "position": "fixed",
                "bottom": "10px",
                "right": "10px",
                "z-index": "9999"
            })
            .on("click", function() {
                var rcaVal = $("#RCAReport").val();
                alert("RCAReport value: " + (rcaVal ? "exists, length " + rcaVal.length : "is empty") + 
                      "\nFirst 50 chars: " + (rcaVal ? rcaVal.substring(0, 50) : "none"));
            })
            .appendTo("body");
            
        // 记录RCAReport字段的值（仅用于调试）
        if ($("#RCAReport").val()) {
            console.log("RCAReport已存在，长度:", $("#RCAReport").val().length);
        } else {
            console.log("RCAReport为空");
        }
        
        // 在表单提交前记录RCAReport值
        $('#editForm').on('submit', function () {
            console.log("表单提交前RCAReport值:", $("#RCAReport").val());
            console.log("表单提交前RCAReport长度:", $("#RCAReport").val().length);
        });
        
        $('#ddlLinkTicket').select2({
            placeholder: "----Select Ticket----",
            allowClear: true
        });

        $('#CommentTextareaId').summernote({
            height: 200, // Set the height of the editor
            width: 645,
            toolbar: [
                ['style', ['bold', 'italic', 'underline', 'clear']],
                ['font', ['strikethrough', 'superscript', 'subscript']],
                ['para', ['ul', 'ol', 'paragraph']],
                ['view', ['fullscreen', 'codeview']],
            ]
        });
        $('#ddlDescription').summernote({
            height: 200, // Set the height of the editor
            width: 645,
            toolbar: [
                ['style', ['bold', 'italic', 'underline', 'clear']],
                ['font', ['strikethrough', 'superscript', 'subscript']],
                ['para', ['ul', 'ol', 'paragraph']],
                ['view', ['fullscreen', 'codeview']],
            ]
        });
        //$('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
        //    $($.fn.dataTable.tables(true)).DataTable()
        //        .columns.adjust();
        //});
        $('#rtbComments').hide();

        $('#Resolutiondate').hide();

        checkStatusAndToggleField();

        // Handle change event of #ddlCaseStatus
        $("#ddlCaseStatus").change(function () {
            checkStatusAndToggleField();
        });


        //sonika - march 2023
        $('#NotesTable').dataTable({
            columnDefs: [{
                "defaultContent": "-",
                "targets": "_all"
            }],
            dom: 'Bfrtip',
            buttons: [{
                extend: 'excelHtml5',
                text: 'Export to Excel',
                autoFilter: true,
                title: 'NotesTable',
                className: 'btn btn-info'
            }],
            dom: "Bfrltip",
            pageLength: 0,
            lengthMenu: [5, 10, 20, 50, 100, 200, 500],
            scrollX: true,
            order: [[2, "desc"]]
        });

        $('#CaseHistoryTable').dataTable({
            columnDefs: [{
                "defaultContent": "-",
                "targets": "_all"
            }],
            dom: 'Bfrtip',
            buttons: [{
                extend: 'excelHtml5',
                text: 'Export to Excel',
                autoFilter: true,
                title: 'CaseHistoryTable',
                className: 'btn btn-info'
            }],
            dom: "Bfrltip",
            pageLength: 0,
            lengthMenu: [5, 10, 20, 50, 100, 200, 500],
            scrollX: true,
            order: [[3, "desc"]]
        });

        $('#CaseAttachmentsTable').dataTable({
            columnDefs: [{
                "defaultContent": "-",
                "targets": "_all"
            }],
            dom: 'Bfrtip',
            buttons: [{
                extend: 'excelHtml5',
                text: 'Export to Excel',
                autoFilter: true,
                title: 'CaseAttachmentsTable',
                className: 'btn btn-info'
            }],
            dom: "Bfrltip",
            pageLength: 0,
            lengthMenu: [5, 10, 20, 50, 100, 200, 500],
            scrollX: true,
            order: [[2, "desc"]]
        });

        GetNotesTbl();
        GetCaseHistoryTbl();
        GetCaseAttachmentsTbl();
        GetLinkedCases();

       $('#ddlCaseStatus').change(function () {

           var status = $("#ddlCaseStatus").val();
           if (@WebSessions.User.PermissionIDFK== 8) {
               if (status === "37") {
                   document.getElementById('ddlDescription').disabled = false;
               } else {
                   document.getElementById('ddlDescription').disabled = true;
               }
           }
       });

    // Function to get value from <p> tag using jQuery
        function getComments() {
            var value = $('#rtbComments').show();
        }
        var container = $("#addDynamicFile");

    var i = $('#uploads1 p').length + 1;

        $('#add1').on('click', function () {

            @*var FileCount =@SBF.HelpDesk.Core.Util.SettingUtil.GetSettingValues(ViewBag.SettingList, SBF.HelpDesk.Core.Enum.Setting.Case_MaxFile_Count);
            if (i <= parseInt(FileCount) || parseInt(FileCount) == -1) {
                $('<label for="uploads1"><input id="officer_upload_' + i + '"  name="files" class="files input-group-text" type="file" value="Browse" multiple="multiple" onchange="uploadOfficerAttachment(this)" style=" display: inline-block; width:242px" /><span onclick="remove(this)" class="remScnt1" style="color:blue;text-decoration:underline; cursor:pointer;padding-left: 3px;">Remove</span></label>').appendTo(container); i++;
            }*@
            if (fileUploadCount < 4) {  // Check if total count is less than 4
                fileUploadCount++;

                var newFileUpload = document.createElement('p');
                newFileUpload.className = 'd-flex';
                newFileUpload.style = 'margin-left:14px';
                newFileUpload.innerHTML = `
                <label for="uploads${fileUploadCount}">
                    <input id="officer_upload_${fileUploadCount}" class="files input-group-text" name="files" type="file" value="Browse" onchange="uploadOfficerAttachment(this)" />
                </label>&nbsp;<a id="add${fileUploadCount}" style="color: blue; text-decoration: underline; cursor: pointer;" onclick="removeFileUpload(this)">Remove</a>  <br>
            `;

                document.getElementById('fileUploadContainer').appendChild(newFileUpload);
            }
            return false;
        });
        function remove(x) {
            if (i > 2) {

                $(x).parent('Label').remove();
                i--;
            }
            return false;
        };

    //$('#officer_upload_1').bind('change', function () {

    //    alert(this.files[0].size);
    //});
    var TotalFileSize = 0;

                function uploadOfficerAttachment(e) {
                    var isFileValidFormat = true;
                    var control = $(e);
                    var fullPath = control.val();
                    var startIndex = (fullPath.indexOf('\\') >= 0 ? fullPath.lastIndexOf('\\') : fullPath.lastIndexOf('/'));
                    var filename = fullPath.substring(startIndex);
                    if (filename.indexOf('\\') === 0 || filename.indexOf('/') === 0) {
                    filename = filename.substring(1);
                    var extension = filename.substr((filename.lastIndexOf('.') + 1));
                    if (extension == 'exe') {
                        isFileValidFormat = false;
                        }
                    }
                var reg = new RegExp(/^([a-zA-Z0-9 _-]+)$/);
                var fname = filename.replace(/\.[^/.]+$/, "")
                var strName = reg.test(fname);

                if (filename.length > 100) {
                    control.replaceWith(control = control.clone(true));
                    alert("Filename length limit exceed. Please shorten the filename and try uploading again.");
                }
                    var FileSizeConfig =@SBF.HelpDesk.Core.Util.SettingUtil.GetSettingValues(ViewBag.SettingList, SBF.HelpDesk.Core.Enum.Setting.Case_MaxFile_Size_MB);
                    var DynamicFileID = control.prop('id');

                   $('#uploads1').find('p').each(function () {
                       //var file_siZe = $(this).find('input[name="' + DynamicFileName + '"]').get(0).files[0].size;
                       var file_siZe = $(this).find('input[id="' + DynamicFileID + '"]').get(0).files[0].size;
                       TotalFileSize = TotalFileSize + file_siZe;
                       if (!isFileValidFormat) {
                           alert("Please check file Format, .exe file is not allowed.");
                           $(this).find('input[id="' + DynamicFileID + '"]').val('');
                       }

                       if (parseInt(FileSizeConfig) < (TotalFileSize / 1000000)) {
                           TotalFileSize = TotalFileSize - file_siZe;

                //if (TotalSize > 10485760) {
                           alert("Maximum file size is " + FileSizeConfig + " MB, please select files upto " + FileSizeConfig+" MB.");
                          $(this).find('input[id="' + DynamicFileID + '"]').val('');
                }
                });

    };
        //ZP
        // Initially disable the View RCA Report button, now can get RCA report value from db
            //$("#viewRCAReportBtn").prop("disabled", true);

            // Check if RCAReport has a value and enable the button if it does
            if ($("#RCAReport").val()) {
                $("#viewRCAReportBtn").prop("disabled", false);
                console.log("RCAReport has value, enabling View RCA Report button");
            }

            // View RCA Report button click handler
            $("#viewRCAReportBtn").click(function (e) {
                e.preventDefault();
                // Get saved RCA report data
                var caseID = $("#caseNumberID").val();
                
                // First check if we already have the report data in memory
                let reportData = $("body").data("rcaReportData");

                if (reportData) {
                    showRCAReport(reportData);
                } else {
                    // Fetch the report from the server
                    $.ajax({
                        url: '@Url.Action("GetRCAReport", "Case")',
                        type: "GET",
                        data: { caseID: caseID },
                        success: function(response) {
                            if (response.success && response.report) {
                                // Store the report and display it
                                $("body").data("rcaReportData", response.report);
                                showRCAReport(response.report);
                            } else {
                                // Provide a helpful message when no report is available
                                if (confirm("No RCA report available for this case. Would you like to generate one using the chatbot?")) {
                                    // Scroll to the chatbot section
                                    $('html, body').animate({
                                        scrollTop: $("#chatbot-section").offset().top
                                    }, 500);
                                }
                                console.log("GetRCAReport response:", JSON.stringify(response));
                            }
                        },
                        error: function() {
                            alert("Failed to retrieve RCA report. Please try again.");
                        }
                    });
                }
            });

            // Function to display RCA report
            function showRCAReport(reportContent) {
                // Create RCA report window
                let rcaReportWindow = $("<div>").attr("id", "rcaReportWindow").addClass("rca-report-window");

                // Add title bar
                let titleBar = $("<div>").addClass("rca-report-title");
                titleBar.append($("<h3>").text("Root Cause Analysis Report (RCA)"));

                // Add close button
                let closeBtn = $("<button>").html("&times;").click(function () {
                    $("#rcaReportWindow").remove();
                    $("#rcaReportOverlay").remove();
                });
                titleBar.append(closeBtn);

                // Add download button
                let downloadBtn = $("<button>").text("Download Report").addClass("download-btn").click(function () {
                    let blob = new Blob([reportContent], { type: "text/plain;charset=utf-8" });
                    let link = document.createElement("a");
                    link.href = URL.createObjectURL(blob);
                    link.download = "RCA_Report_" + new Date().toISOString().slice(0, 10) + ".txt";
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                });
                titleBar.append(downloadBtn);

                // Add report content
                let reportContentDiv = $("<div>").addClass("rca-report-content");

                // Format report content
                //let englishReport = reportContent;
                //englishReport = englishReport.replace(/# 根本原因分析报告 \(RCA\)/g, "# Root Cause Analysis Report (RCA)");
                //englishReport = englishReport.replace(/## \d+\. 问题概述/g, "## 1. Problem Overview");
                //englishReport = englishReport.replace(/## \d+\. 根本原因/g, "## 2. Root Causes");
                //englishReport = englishReport.replace(/## \d+\. 影响分析/g, "## 3. Impact Analysis");
                //englishReport = englishReport.replace(/## \d+\. 解决方案/g, "## 4. Resolution");
                //englishReport = englishReport.replace(/## \d+\. 预防措施/g, "## 5. Preventive Measures");
                //englishReport = englishReport.replace(/## \d+\. 补充信息/g, "## 6. Supplementary Information");
                //englishReport = englishReport.replace(/## \d+\. 结论/g, "## 7. Conclusion");

                //englishReport = englishReport.replace(/- \*\*问题类别\*\*:/g, "- **Category**:");
                //englishReport = englishReport.replace(/- \*\*任务类型\*\*:/g, "- **Task Type**:");
                //englishReport = englishReport.replace(/- \*\*摘要\*\*:/g, "- **Summary**:");
                //englishReport = englishReport.replace(/- \*\*详细描述\*\*:/g, "- **Detailed Description**:");
                //englishReport = englishReport.replace(/- \*\*受影响模块\*\*:/g, "- **Affected Module**:");
                //englishReport = englishReport.replace(/- \*\*严重程度\*\*:/g, "- **Severity**:");
                //englishReport = englishReport.replace(/- \*\*优先级\*\*:/g, "- **Priority**:");
                //englishReport = englishReport.replace(/- \*\*缺陷阶段\*\*:/g, "- **Defect Phase**:");
                //englishReport = englishReport.replace(/- \*\*已应用修复\*\*:/g, "- **Fix Applied**:");
                //englishReport = englishReport.replace(/- \*\*通用措施\*\*:/g, "- **General Measure**:");

                //let formattedReport = englishReport.replace(/\n/g, "<br>");
                let formattedReport = reportContent.replace(/\n/g, "<br>");
                formattedReport = formattedReport.replace(/# (.*?)<br>/g, "<h1>$1</h1>");
                formattedReport = formattedReport.replace(/## (.*?)<br>/g, "<h2>$1</h2>");
                formattedReport = formattedReport.replace(/### (.*?)<br>/g, "<h3>$1</h3>");
                formattedReport = formattedReport.replace(/- (.*?)<br>/g, "<ul><li>$1</li></ul>");
                formattedReport = formattedReport.replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>");

                reportContentDiv.html(formattedReport);

                rcaReportWindow.append(titleBar);
                rcaReportWindow.append(reportContentDiv);

                let overlay = $("<div>").attr("id", "rcaReportOverlay").addClass("rca-report-overlay");
                overlay.click(function (e) {
                    if (e.target === this) {
                        $("#rcaReportWindow").remove();
                        $("#rcaReportOverlay").remove();
                    }
                });

                $("body").append(overlay);
                $("body").append(rcaReportWindow);
            }
    });


    function GetLinkedCases() {
        debugger;
        var modelValue = '@(ViewBag.caselinked != null ? ViewBag.caselinked : "")';

        if (modelValue !== "" && modelValue !== undefined) {
            // ViewBag.caselinked is not empty or null
            var NewArray = modelValue.split(',');
            $("#ddlLinkTicket").val(NewArray);
            $("#ddlLinkTicket").select2().trigger('change.select2');
            $("#ddlLinkTicket").val(NewArray).trigger('change.select2');
        } else {
            // ViewBag.caselinked is empty, null, or undefined
            console.log("ViewBag.caselinked is empty, null, or undefined.");
        }

        @*var modelValue = '@ViewBag.caselinked'; // Enclose ViewBag value in single quotes to ensure it's treated as a string

        if ((modelValue !== null && modelValue !== undefined) || modelValue!="") {
            var NewArray = Array.from(modelValue.split(','), Number);

            $("#ddlLinkTicket").val(NewArray);
            $("#ddlLinkTicket").select2().trigger('change.select2');
            $("#ddlLinkTicket").val(NewArray).trigger('change.select2');
            // The rest of your code
        } else {
            // Handle the case where ViewBag.caselinked is null or undefined
            console.error("ViewBag.caselinked is null or undefined.");
        }*@


    }
    function htmlEncode(value) {
        return $('<div/>').text(value).html();
    }
    function checkStatusAndToggleField() {
        var status = $("#ddlCaseStatus").val();

        if ((status === "20" || status === "5") && @WebSessions.User.PermissionIDFK !=8) {
            $("#rcaField").show(); // Show the field
            $("#ddlRCA").val($("#ddlRCA option:first").val());
            document.getElementById("CommentTextareaId").required = true;
        } else {
            $("#rcaField").hide(); // Hide the field
        }
    }
    $('#ddlCaseStatus').change(function () {

        var selectedDepartment = $("#ddlCaseStatus").val();
        if (selectedDepartment != 20) {

            $('#Resolutiondate').hide();

            $('#datepicker').removeAttr('required');

        }
        else {
            if (@WebSessions.User.PermissionIDFK== 5 || @WebSessions.User.PermissionIDFK== 2 || @WebSessions.User.PermissionIDFK== 1 ) {
                $('#Resolutiondate').show();
            }

        }

    });

        //$('#remScnt1').live('click', function () {
        //    if (i > 2) {
        //        $(this).parents('p').remove();
        //        i--;
        //    }
        //    return false;
        //});
    // end
    @*$('#submitBtn').click(function () {
        //sugan

        var caseNoteContent = $('#CommentTextareaId').summernote('code');

        // Example HTML string with tags
        var htmlString = caseNoteContent;

        // Create a temporary div element
        var tempDiv = $('<div>');

        // Set the HTML content of the div with your HTML string
        tempDiv.html(htmlString);

        // Get the text content without HTML tags
        var textWithoutTags = tempDiv.text();

        var caseID = $("#caseNumberID").val();
        // Send the HTML content to the server using AJAX
        $.ajax({
            url: '@Url.Action("InsertCaseNote", "Case")', // Replace with your server-side endpoint
            method: 'POST',
            data: {
                caseID: caseID,
                caseNote: textWithoutTags
            },
            success: function (response) {
                // Handle the success response from the controller method
                if (response == "Success") {
                    var editCaseUrl = '@Url.Action("EditCase", "Dashboard")?CaseID=' + parseInt(caseID);
                    // Redirect to the EditCase page
                    //window.location.href = editCaseUrl;
                    GetNotesTbl();
                    GetCaseHistoryTbl();
                    GetCaseAttachmentsTbl();
                }
                console.log("Case note added successfully.");
                $(".popup").fadeIn();
                setTimeout(function () {
                    $(".popup").fadeOut();
                }, 3000); // 3000 milliseconds = 3 seconds
                $('#CommentTextareaId').summernote('code', '');
            },
            error: function (error) {
                console.error('Error:', error);
            }
        });
    });*@

    $('#submitBtn').click(function (e) {
        console.log("表单提交前RCAReport值:", $("#RCAReport").val());
        console.log("表单提交前RCAReport长度:", $("#RCAReport").val().length);
        
        // ... existing code ...
    });

    $('#submitBtn').click(function () {

    // Get case note content from Summernote
    var caseNoteContent = $('#CommentTextareaId').summernote('code');

    // Example HTML string with tags
    var htmlString = caseNoteContent;

    // Create a temporary div element
    var tempDiv = $('<div>');

    // Set the HTML content of the div with your HTML string
    tempDiv.html(htmlString);

    // Get the text content without HTML tags
    var textWithoutTags = tempDiv.text();

    var caseID = $("#caseNumberID").val();

    // Call uploadOfficerAttachment to handle file uploads
        uploadOfficerAttachment(caseID, textWithoutTags);
});

    function uploadOfficerAttachment(caseID, caseNote) {
    var formData = new FormData();

    // Get files
    var fileInputs = document.getElementById('fileUploadContainer').querySelectorAll('input[type="file"]');

    // Loop through each file input element
    fileInputs.forEach(function (input) {
        // Get selected files from the current file input element
        var files = input.files;

        // Append files to FormData
        for (var i = 0; i < files.length; i++) {
            formData.append('files[]', files[i]);
        }
    });

    // Append other form data
    formData.append('caseID', caseID);
    formData.append('caseNote', caseNote);

    // Make AJAX request
    $(".overlay").show();
    $.ajax({
        url: '@Url.Action("InsertCaseNote", "Case")',
        method: 'POST',
        data: formData,
        contentType: false,
        processData: false,
        success: function (response) {
            $(".overlay").hide();
            // Handle success response
            if (response == "Success") {
                var editCaseUrl = '@Url.Action("EditCase", "Dashboard")?CaseID=' + parseInt(caseID);
                GetNotesTbl();
                GetCaseHistoryTbl();
                GetCaseAttachmentsTbl();
                console.log("Case note added successfully.");
                $(".popup").fadeIn();
                setTimeout(function () {
                    $(".popup").fadeOut();
                }, 3000);
                $('#CommentTextareaId').summernote('code', '');
                var fileUploadContainer = document.getElementById('fileUploadContainer');
                //alert(fileUploadContainer.children.length);
                // Loop through each child element of fileUploadContainer
                for (var i = 0; i < fileUploadContainer.children.length; i++) {
                    var child = fileUploadContainer.children[i];

                    // Check if the child element is a paragraph element
                    if (child.tagName === 'P') {
                        // Find the file input element within the paragraph
                        var fileInput = child.querySelector('input[type="file"]');

                        // Clear the value of the file input
                        if (fileInput) {
                            fileInput.value = '';
                            for (var i = fileUploadContainer.children.length - 1; i > 0; i--) {
                                // Remove the child element
                                fileUploadContainer.removeChild(fileUploadContainer.children[i]);
                            }
                        }

                    }

                }
            }

        },
        error: function (error) {
            console.error('Error:', error);
        }
    });
}


    @*$('#btnSubmit').click(function () {
        debugger;
        $('#Name').removeProp('disabled');
        $('#Email').removeProp('disabled');
        $('#Contact').removeProp('disabled');
        $('#Summary').removeProp('disabled');
        var selectedDepartment = $("#ddlCaseStatus").val();
        $('#CaseNoteVal').removeAttr('required');
        //sugan
        var Description = $('#ddlDescription').summernote('code');
        // Example HTML string with tags
        var htmlString = Description;
        console.log(Description);
        // Create a temporary div element
        //var tempDiv = $('<div>');

        //// Set the HTML content of the div with your HTML string
        //tempDiv.html(htmlString);

        //// Get the text content without HTML tags
        //var textWithoutTags = tempDiv.text();
        //console.log(textWithoutTags);
        var encodedDescription = $('<div>').text(Description).html();

        $("input[name='Model.Description']").val(encodedDescription);
        $("input[name='model.Description']").val(encodedDescription);


        if (selectedDepartment != 20) {

            $('#Resolutiondate').hide();

            $('#datepicker').removeAttr('required');

        }
        else {
            if (@WebSessions.User.PermissionIDFK== 5 || @WebSessions.User.PermissionIDFK== 2 || @WebSessions.User.PermissionIDFK== 1 ) {
                $('#Resolutiondate').show();
            }

        }
    });*@

    //ZP  global varible: set chatbot to be called once
    var isChatbotFinished = false;
    $('#editForm').on('submit', function (e) {
       let currentCaseStatus = $("#ddlCaseStatus").val();
       console.log('current status:', currentCaseStatus);
       if (currentCaseStatus === "5" && !isChatbotFinished ) {
          console.log('The state is closed and the chatbot processing has not been completed, the chatbot is triggered');
          e.preventDefault();
          //trigger chatbot
          TriggerChatbotWindow();
          return;
        }

        debugger;
        $('#Name').removeProp('disabled');
        $('#Email').removeProp('disabled');
        $('#Contact').removeProp('disabled');
        $('#Summary').removeProp('disabled');
        var selectedDepartment = $("#ddlCaseStatus").val();
        $('#CaseNoteVal').removeAttr('required');
        //sugan
        var Description = $('#ddlDescription').summernote('code');
        // Example HTML string with tags
        var htmlString = Description;
        console.log(Description);
        // Create a temporary div element
        //var tempDiv = $('<div>');

        //// Set the HTML content of the div with your HTML string
        //tempDiv.html(htmlString);

        //// Get the text content without HTML tags
        //var textWithoutTags = tempDiv.text();
        //console.log(textWithoutTags);
        var encodedDescription = $('<div>').text(Description).html();

        $("input[name='Model.Description']").val(encodedDescription);
        $("input[name='model.Description']").val(encodedDescription);


        if (selectedDepartment != 20) {

            $('#Resolutiondate').hide();

            $('#datepicker').removeAttr('required');

        }
        else {
            if (@WebSessions.User.PermissionIDFK== 5 || @WebSessions.User.PermissionIDFK== 2 || @WebSessions.User.PermissionIDFK== 1 ) {
                $('#Resolutiondate').show();
            }

        }
        this.submit();

        });

    @*$('#Department').change(function () {
        var selectedDepartment = $("#Department").val();
        var ddlCategory = $('#ddlCategory');
        ddlCategory.empty();
        var ddlEnvironment = $('#ddlEnvironment'); //sonika - march 2023
        ddlEnvironment.empty(); //sonika - march 2023
                  $.getJSON('@Url.Action("GetCategoryByDepartment")', {
                categoryid: selectedDepartment
                }, function (category) {
                        if (category != null && !jQuery.isEmptyObject(category)) {
                            //ddlCategory.append($('<option />', { value: null, text: "All" }));
                            $.each(category, function (index, category1) {
                            ddlCategory.append($('<option />', { value: category1.ID, text: category1.Descr }));
                            });
                      };
                      //if (data["EnvironmentList"] != null && !jQuery.isEmptyObject(data["EnvironmentList"])) {
                      //    //ddlCategory.append($('<option />', { value: null, text: "All" }));
                      //    $.each(data["EnvironmentList"], function (index, env1) {
                      //        ddlEnvironment.append($('<option />', { value: env1.EnvID, text: env1.EnvName }));
                      //    });
                      //}
                });
                //}
                //Before deploymnet change the url like "TEBS_RBMS/Booking/GetBookingDetail/"
    });*@

</script>
@*sonika - march 2023 - code written for displaying the notes table*@
@*<script type="text/javascript">
                //code for upload  attachment by amol
            //var container = $("#uploads1");
        var container = $("#addDynamicFile");

        var i = $('#uploads1 p').length + 1;

            $('#add1').on('click', function () {

                var FileCount =@SBF.HelpDesk.Core.Util.SettingUtil.GetSettingValues(ViewBag.SettingList, SBF.HelpDesk.Core.Enum.Setting.Case_MaxFile_Count);
                if (i <= parseInt(FileCount) || parseInt(FileCount) == -1) {
                    $('<label for="uploads1"><input id="officer_upload_' + i + '"  name="files" class="files input-group-text" type="file" value="Browse" multiple="multiple" onchange="uploadOfficerAttachment(this)" style=" display: inline-block; width:242px" /><span onclick="remove(this)" class="remScnt1" style="color:blue;text-decoration:underline; cursor:pointer;padding-left: 3px;">Remove</span></label>').appendTo(container); i++;
                }
                return false;
            });
            function remove(x) {
                if (i > 2) {

                    $(x).parent('Label').remove();
                    i--;
                }
                return false;
            };

        //$('#officer_upload_1').bind('change', function () {

        //    alert(this.files[0].size);
        //});
        var TotalFileSize = 0;

                    function uploadOfficerAttachment(e) {
                        var isFileValidFormat = true;
                        var control = $(e);
                        var fullPath = control.val();
                        var startIndex = (fullPath.indexOf('\\') >= 0 ? fullPath.lastIndexOf('\\') : fullPath.lastIndexOf('/'));
                        var filename = fullPath.substring(startIndex);
                        if (filename.indexOf('\\') === 0 || filename.indexOf('/') === 0) {
                        filename = filename.substring(1);
                        var extension = filename.substr((filename.lastIndexOf('.') + 1));
                        if (extension == 'exe') {
                            isFileValidFormat = false;
                            }
                        }
                    var reg = new RegExp(/^([a-zA-Z0-9 _-]+)$/);
                    var fname = filename.replace(/\.[^/.]+$/, "")
                    var strName = reg.test(fname);

                    if (filename.length > 100) {
                        control.replaceWith(control = control.clone(true));
                        alert("Filename length limit exceed. Please shorten the filename and try uploading again.");
                    }
                        var FileSizeConfig =@SBF.HelpDesk.Core.Util.SettingUtil.GetSettingValues(ViewBag.SettingList, SBF.HelpDesk.Core.Enum.Setting.Case_MaxFile_Size_MB);
                        var DynamicFileID = control.prop('id');

                       $('#uploads1').find('p').each(function () {
                           //var file_siZe = $(this).find('input[name="' + DynamicFileName + '"]').get(0).files[0].size;
                           var file_siZe = $(this).find('input[id="' + DynamicFileID + '"]').get(0).files[0].size;
                           TotalFileSize = TotalFileSize + file_siZe;
                           if (!isFileValidFormat) {
                               alert("Please check file Format, .exe file is not allowed.");
                               $(this).find('input[id="' + DynamicFileID + '"]').val('');
                           }

                           if (parseInt(FileSizeConfig) < (TotalFileSize / 1000000)) {
                               TotalFileSize = TotalFileSize - file_siZe;

                //if (TotalSize > 10485760) {
                               alert("Maximum file size is " + FileSizeConfig + " MB, please select files upto " + FileSizeConfig+" MB.");
                              $(this).find('input[id="' + DynamicFileID + '"]').val('');
                }
                });

        };
    </script>*@
<script type="text/javascript">


    @*var totalFileSize = 0;
    function uploadOfficerAttachment(e) {
        alert('hi');
        var formData = new FormData();

        // Get other form data values
        var caseID = document.getElementById('caseID').value; // Assuming there's an element with id 'caseID'
        var textWithoutTags = "YourCaseNoteData"; // Example data, replace with your actual data
        formData.append('caseID', caseID);
        formData.append('caseNote', textWithoutTags);

        // Add files
        var files = input.files;
        for (var i = 0; i < files.length; i++) {
            formData.append('files[]', files[i]);
        }
                    var isFileValidFormat = true;
                    var control = $(e);
                    var fullPath = control.val();
                    var startIndex = (fullPath.indexOf('\\') >= 0 ? fullPath.lastIndexOf('\\') : fullPath.lastIndexOf('/'));
                    var filename = fullPath.substring(startIndex);
                    if (filename.indexOf('\\') === 0 || filename.indexOf('/') === 0) {
                    filename = filename.substring(1);
                    var extension = filename.substr((filename.lastIndexOf('.') + 1));
                    if (extension == 'exe') {
                        isFileValidFormat = false;
                        }
                    }
                var reg = new RegExp(/^([a-zA-Z0-9 _-]+)$/);
        var fname = filename.replace(/\.[^/.]+$/, "");
                var strName = reg.test(fname);
        alert(filename);
                if (filename.length > 100) {
                    control.replaceWith(control = control.clone(true));
                    alert("Filename length limit exceed. Please shorten the filename and try uploading again.");
                }
                    var FileSizeConfig =@SBF.HelpDesk.Core.Util.SettingUtil.GetSettingValues(ViewBag.SettingList, SBF.HelpDesk.Core.Enum.Setting.Case_MaxFile_Size_MB);
                    var DynamicFileID = control.prop('id');

                   $('#uploads1').find('p').each(function () {
                       //var file_siZe = $(this).find('input[name="' + DynamicFileName + '"]').get(0).files[0].size;
                       var file_siZe = $(this).find('input[id="' + DynamicFileID + '"]').get(0).files[0].size;
                       TotalFileSize = TotalFileSize + file_siZe;
                       if (!isFileValidFormat) {
                           alert("Please check file Format, .exe file is not allowed.");
                           $(this).find('input[id="' + DynamicFileID + '"]').val('');
                       }

                       if (parseInt(FileSizeConfig) < (TotalFileSize / 1000000)) {
                           TotalFileSize = TotalFileSize - file_siZe;

                //if (TotalSize > 10485760) {
                           alert("Maximum file size is " + FileSizeConfig + " MB, please select files upto " + FileSizeConfig+" MB.");
                          $(this).find('input[id="' + DynamicFileID + '"]').val('');
                }
                });

    };*@

    @*function uploadOfficerAttachment(e) {
        var isFileValidFormat = true;
        var control = $(e);
        var fullPath = control.val();
        var startIndex = (fullPath.indexOf('\\') >= 0 ? fullPath.lastIndexOf('\\') : fullPath.lastIndexOf('/'));
        var filename = fullPath.substring(startIndex);
        if (filename.indexOf('\\') === 0 || filename.indexOf('/') === 0) {
            filename = filename.substring(1);
        }
        var extension = filename.substr((filename.lastIndexOf('.') + 1));
        if (extension == 'exe') {
            isFileValidFormat = false;
        }

        var reg = new RegExp(/^([a-zA-Z0-9 _-]+)$/);
        var fname = filename.replace(/\.[^/.]+$/, "");
        var strName = reg.test(fname);

        if (filename.length > 100) {
            control.replaceWith(control = control.clone(true));
            alert("Filename length limit exceed. Please shorten the filename and try uploading again.");
        }

        // Get the maximum file size from a hidden input field or other appropriate method
        var fileSizeConfig = parseInt('@SBF.HelpDesk.Core.Util.SettingUtil.GetSettingValues(ViewBag.SettingList, SBF.HelpDesk.Core.Enum.Setting.Case_MaxFile_Size_MB)');
        var dynamicFileID = control.prop('id');

        $('#uploads1').find('p').each(function () {
            var fileSiZe = $(this).find('input[id="' + dynamicFileID + '"]').get(0).files[0].size;
            totalFileSize += fileSiZe;
            if (!isFileValidFormat) {
                alert("Please check file format. .exe files are not allowed.");
                $(this).find('input[id="' + dynamicFileID + '"]').val('');
            }
            if (fileSizeConfig < (totalFileSize / 1000000)) {
                totalFileSize -= fileSiZe;
                alert("Maximum file size is " + fileSizeConfig + " MB. Please select files up to " + fileSizeConfig + " MB.");
                $(this).find('input[id="' + dynamicFileID + '"]').val('');
            }
        });
    };*@
</script>
<script type="text/javascript">
    function convertJsonDateToDate(dateString) {
        // Extract the timestamp from the string
        var timestamp = parseInt(dateString.match(/\d+/)[0]);

        // Create a new Date object with the extracted timestamp
        var date = new Date(timestamp);

        return date;
    }
    function formatDateToLocalTimezone(formattedDateTime) {
        // Parse the formatted date/time string into a JavaScript Date object
        var dateTime = new Date(moment(formattedDateTime, 'DD-MM-YYYY HH:mm:ss').toDate());

        // Get the offset in minutes between the local timezone and UTC
        var offset = dateTime.getTimezoneOffset();

        // Add the offset to the date/time to convert it to the local timezone
        dateTime.setMinutes(dateTime.getMinutes() - offset);

        // Format the local date/time string
        var formattedLocalDateTime = moment(dateTime).format('DD-MM-YYYY HH:mm:ss');

        return formattedLocalDateTime;
    }
    function GetNotesTbl() {

        var caseID = $("#caseNumberID").val();
        $.ajax({
            type: "GET",
            url: '@Url.Action("BindNotesDetails", "Case")',
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            data: {
                CaseNumber: caseID
            },
            success: function (response) {
                if (response) {

                    populateNotesTable(response);
                    $($.fn.dataTable.tables(true)).DataTable().columns.adjust();
                }
            }
        });

        function populateNotesTable(data) {
            debugger;
            console.log("populating Notes data table...");
            // clear the table before populating it with more data
            $('#NotesTable').dataTable().fnClearTable();
            //var table = $('#CaseTable').dataTable();
            var length = data.length;
            for(var i = 0; i<length; i++) {
            var cases = data[i];

            var deleteButtonHtml = ""; // Initialize the delete button HTML

            // Check if cases.CreatedBy is equal to @WebSessions.User.FullName
            if (cases.CreatedBy === "@WebSessions.User.FullName") {
                deleteButtonHtml = "<center><button class='btn btn-danger btn-sm' data-bs-toggle='tooltip' data-bs-placement='top' title='Delete' UID=" + cases.ID + " onclick='DeleteNote(" + cases.ID + ")' ><i class='fa fa-trash'></i></button></center>";
                }


                var formattedDateTime = convertJsonDateToDate(cases.CreatedDate);
                //alert(moment(formattedDateTime).format('DD-MM-YYYY HH:mm:ss'));
                var formattedDateTime1 = moment(cases.CreatedDate, "DD-MM-YYYY hh:mm:ss A");
                //var jsDate = formattedDateTime.toDate();

            // You could also use an ajax property on the data table initialization
            $('#NotesTable').dataTable().fnAddData([
                cases.Note,
                cases.CreatedBy,
                formatDateToLocalTimezone(moment(formattedDateTime).format('DD-MM-YYYY HH:mm:ss')),
                //    "<center><button class='btn btn-danger btn-sm' data-bs-toggle='tooltip' data-bs-placement='top' title='Delete' UID=" + cases.ID + " onclick='DeleteNote(" + cases.ID + ")' ><i class='fa fa-trash'></i></button></center>"
                deleteButtonHtml
            ]);
            }

        }
    }

function DeleteNote(UID) {

    $('#Resolutiondate').hide();
    $('#datepicker').removeAttr('required');
    $('#CaseNoteVal').removeAttr('required');

    var caseID = $("#caseNumberID").val();

    $.ajax({
        url: "@Url.Action("DeleteNoteSelected", "Case")",
        type: "POST",
        data: JSON.stringify({
            NoteID: UID
        }),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            if (data === "Success") {

                var editCaseUrl = '@Url.Action("EditCase", "Dashboard")?CaseID=' + parseInt(caseID);
                // Redirect to the EditCase page
                window.location.href = editCaseUrl;
            } else {
                // Handle the case where deletion was not successful
                swal("Error deleting!", "Please try again", "error");
            }
        },
        error: function () {
            // Handle Ajax error
            swal("Error deleting!", "Please try again", "error");
        }
    });
}

    function OkSubmit() {

        Swal.fire({
            position: '',
            icon: 'success',
            title: 'Your changes has been updated',
            showConfirmButton: false,
            timer: 2000,
            timerProgressBar: true
        })
    }

    function GetCaseHistoryTbl() {
        var caseID = $("#caseNumberID").val();
       $.ajax({
            type: "GET",
            url: '@Url.Action("BindCaseHistoryDetails", "Case")',
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            data: {
                CaseNumber: caseID
            },
            success: function (response) {
                if (response) {
                    myJsonData = response;
                    populateCaseHistoryTable(myJsonData);
                    $($.fn.dataTable.tables(true)).DataTable().columns.adjust();
                }
            }
       });

        function populateCaseHistoryTable(data) {
            console.log("populating Case History data table...");
            // clear the table before populating it with more data
            $('#CaseHistoryTable').dataTable().fnClearTable();
            //var table = $('#CaseTable').dataTable();
            var length = data.length;
            for (var i = 0; i < length; i++) {
                var cases = data[i];
                // You could also use an ajax property on the data table initialization
                var formattedDateTime = convertJsonDateToDate(cases.CreatedDate);
                $('#CaseHistoryTable').dataTable().fnAddData([
                    cases.Field,
                    cases.Change,
                    cases.CreatedBy,
                    formatDateToLocalTimezone(moment(formattedDateTime).format('DD-MM-YYYY HH:mm:ss'))
                ]);
            }
        }
    }

    debugger
    function GetCaseAttachmentsTbl() {
       var caseID = $("#caseNumberID").val();
       $.ajax({
            type: "GET",
            url: '@Url.Action("BindCaseAttachmentDetails", "Case")',
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            data: {
                CaseNumber: caseID
            },
            success: function (response) {
                if (response) {
                    myJsonData = response;
                    populateCaseAttachmentTable(myJsonData);
                    $($.fn.dataTable.tables(true)).DataTable().columns.adjust();
                }
            }
       });

        function populateCaseAttachmentTable(data) {
            console.log("populating Case Attachment data table...");
            // clear the table before populating it with more data
            $('#CaseAttachmentsTable').dataTable().fnClearTable();
            //var table = $('#CaseTable').dataTable();
            var length = data.length;
            for (var i = 0; i < length; i++) {
                var cases = data[i];
                // You could also use an ajax property on the data table initialization
                var formattedDateTime = convertJsonDateToDate(cases.CreatedDate);
                $('#CaseAttachmentsTable').dataTable().fnAddData([
                    "<a href='javascript:downloadBase64File(\"" + cases.ContentType + "\", \"" + cases.Attachment + "\",\"" + cases.FileName + "\")' > " + cases.FileName + "</a>",
                    cases.CreatedBy,
                    formatDateToLocalTimezone(moment(formattedDateTime).format('DD-MM-YYYY HH:mm:ss'))
                    //cases.UpdatedBy,
                    //cases.UpdatedDateTime
                ]);
            }
        }
    }
</script>
<script>
    function downloadBase64File(contentType, base64Data, fileName) {

        const linkSource = `data:${contentType};base64,${base64Data}`;
        const downloadLink = document.createElement("a");
        downloadLink.href = linkSource;
        downloadLink.download = fileName;
        downloadLink.click();
    }
</script>

@*ZP javascript for chatbot popup*@
<script>

    let isFinal = false;
    let issueDesc = "";
    let formData = {};
    let sectionStates = {};


    // Make chatbot window draggable
    // Keep the draggable initialization
    $("#chatbotWindow").draggable({
        handle: "#chatbotHeader",
        containment: "document",
        cursor: "move",
        start: function (event, ui) {
            // Save initial position
            $(this).data('startPos', $(this).position());
        },
        stop: function (event, ui) {
            // Prevent abnormal positioning
            if (ui.position.left < 0 || ui.position.top < 0) {
                $(this).css($(this).data('startPos'));
            }
        }
    });
    // Use the jQuery UI position function to center it
    //$("#chatbotWindow").position({
    //    my: "center",
    //    at: "center+50",
    //    of: window
    //});
    // With this improved version:
    function positionChatbotWindow() {
        let windowHeight = $(window).height();
        let chatbotHeight = $("#chatbotWindow").outerHeight();

        // Ensure the top position is at least 50px from the top of the viewport
        let topPosition = Math.max(50, (windowHeight - chatbotHeight) / 2);

        $("#chatbotWindow").css({
            "top": topPosition + "px",
            "left": "50%",
            "transform": "translateX(-50%)"
        });
    }

    //// Call this when showing the chatbot
    //$("#chatbotWindow").css("display", "flex").show();
    //positionChatbotWindow();

    // Also handle window resize events
    $(window).resize(function () {
        if ($("#chatbotWindow").is(":visible")) {
            positionChatbotWindow();
        }
    })

    // Send button
    $("#sendBtn").click(function() {
        sendMessage(isFinal);
    });

    // Confirm button
    $("#confirmBtn").click(function () {
        isChatbotFinished = true;
        let description = formData.description || "";

        // ?? make sure final result to be input in the box
        $("#ddlDescription").summernote('code', description);

        $.ajax({
            url: '@Url.Action("OptimiseCaseDesc", "Case")',
            type: "POST",
            contentType: "application/json",
            dataType: "json",
            data: JSON.stringify({ formData: formData, isFinal: true }),
            success: function (response) {

                if (response.status === "success") {
                    // Check if there's an RCA report
                    if (response.rca_report) {
                        // Store report data
                        //assign response.rca_report  value to the filed  RCAReport
                        
                        //$("body").data("rcaReportData", response.rca_report);
                        $("#RCAReport").val(response.rca_report);
                        console.log("RCA Report set, value length:", response.rca_report.length);
                        console.log("RCA Report first 50 chars:", response.rca_report.substring(0, 50));
                        
                        // Store report in memory for immediate viewing
                        $("body").data("rcaReportData", response.rca_report);
                        
                        // Hide the chatbot window
                        $("#chatbotWindow").hide();

                        // Show success message
                        alert("Form submitted successfully! You can now view the RCA report.");

                        // Re-enable the submit button
                        $("#btnSubmit").prop("disabled", false);
                    } else {
                        // If no RCA report, show regular success message
                        $("#chatbotWindow").hide();
                        $("#chatMessages").html("");
                        alert("Form submitted successfully!");
                        $("#btnSubmit").prop("disabled", false);
                    }

                } else if (response.error) {
                    console.error("Error from API:", response.error);
                    alert("Error: " + response.error);
                    if (response.response) {
                        console.log("Response data:", response.response);
                        appendMessage("System", "Error occurred but received response: " + response.response, "ai-message");
                    }
                } else {
                    alert("Operation completed with unknown status");
                }
            },
            error: function(xhr, status, error) {
                console.error("Error:", error);
                alert("Chatbot service failed. Status: " + xhr.status);
            }
        });
    });

    // Close button
    $("#closeChatbot").click(function () {
        isChatbotFinished=false;
        $("#chatbotWindow").hide();
        $("#chatMessages").html("");
    });

    // Expand/Collapse All buttons
    $("#expandAllBtn").click(function() {
        Object.keys(sectionStates).forEach(key => {
            sectionStates[key].expanded = true;
        });
        loadForm();
    });

    $("#collapseAllBtn").click(function() {
        Object.keys(sectionStates).forEach(key => {
            sectionStates[key].expanded = false;
        });
        loadForm();
    });

    // Message navigation
    let currentMessageIndex = 0;

    $("#prevMessage").click(function() {
        if (currentMessageIndex > 0) {
            currentMessageIndex--;
            scrollToMessage(currentMessageIndex);
        }
    });

    $("#nextMessage").click(function() {
        let totalMessages = $("#chatMessages .chat-message").length;
        if (currentMessageIndex < totalMessages - 1) {
            currentMessageIndex++;
            scrollToMessage(currentMessageIndex);
        }
    });

    function scrollToMessage(index) {
        let targetMessage = $("#message-" + index);
        if (targetMessage.length) {
            $("#chatMessages").animate({
                scrollTop: targetMessage.offset().top - $("#chatMessages").offset().top + $("#chatMessages").scrollTop()
            }, 300);
        }
    }

    function assignMessageIds() {
        $("#chatMessages .chat-message").each(function(index) {
            $(this).attr("id", "message-" + index);
        });
    }

    // Send message to server
    function sendMessage(finalStatus) {
        // Displays the loading animation
        $("#loader").css("display", "flex").show();

        let payload;

        if (finalStatus) {
            payload = JSON.stringify({ formData: {}, isFinal: true });
        } else {
            let requestData = { formData: {}, isFinal: false };

            if ($("#btnSubmit").is(":disabled")) {
                requestData.formData = formData;

            } else {
                requestData.formData = formData;
            }

            payload = JSON.stringify(requestData);
        }

        appendMessage("User", payload, "user-message");

        $.ajax({
            url: '@Url.Action("OptimiseCaseDesc", "Case")',
            type: "POST",
            contentType: "application/json",
            dataType: "json",
            data: payload,
            success: function (response) {
                Object.keys(formData).forEach(key => {
                    if (typeof formData[key] === "object" && formData[key] !== null) {
                        Object.assign(formData[key], mapResponseToFormData(response)[key]);
                    } else {
                        formData[key] = mapResponseToFormData(response)[key];
                    }
                });

                loadForm();

                let formattedJson = JSON.stringify(response, null, 2);
                appendMessage("Assistant", formattedJson, "ai-message");
            },
            error: function (xhr, status, error) {
                $("#loader").hide();

                console.error("Error:", error);
                alert("Chatbot service failed. Status: " + xhr.status);
            }
        });
    }

    function mapResponseToFormData(response) {
        return {
            category: response.Category || "",
            task: response.Task || "",
            summary: response.Summary || "",
            description: response.Description || "",
            root_causes: response.RootCauses || [],
            conclusion: response.Conclusion || "",
            impact_analysis: {
                affected_module: response.ImpactAnalysis?.AffectedModule || "",
                severity: response.ImpactAnalysis?.Severity || "",
                priority: response.ImpactAnalysis?.Priority || "",
                defect_phase: response.ImpactAnalysis?.DefectPhase || "",
                dynamic_fields: response.ImpactAnalysis?.DynamicFields?.map(mapDynamicField) || []
            },
            resolution: {
                fix_applied: response.Resolution?.FixApplied || "",
                dynamic_fields: response.Resolution?.DynamicFields?.map(mapDynamicField) || []
            },
            preventive_measures: {
                general_measure: response.PreventiveMeasures?.GeneralMeasure || "",
                dynamic_fields: response.PreventiveMeasures?.DynamicFields?.map(mapDynamicField) || []
            },
            supplementary_info: {
                dynamic_fields: response.SupplementaryInfo?.DynamicFields?.map(mapDynamicField) || []
            },
            additional_questions: {
                dynamic_fields: response.AdditionalQuestions?.DynamicFields?.map(mapDynamicField) || []
            }
        };
    }

    function mapDynamicField(field) {
        return {
            key: field.Key || "",
            value: field.Value || "",
            type: field.Type || "string",
            is_confirmed: field.IsConfirmed || false
        };
    }

    // Append message to chat
    function appendMessage(sender, message, messageType) {
        let chatContainer = sender === "User" ? $("#assistantMessages") : $("#userMessages");

        let messageElement = $("<div>").addClass("chat-message").addClass(messageType);
        let senderLabel = $("<strong>").text(sender + ":");
        messageElement.append(senderLabel);

        let formattedMessage;
        try {
            let jsonObject = typeof message === "string" ? JSON.parse(message) : message;
            formattedMessage = $("<pre>").text(JSON.stringify(jsonObject, null, 2));
        } catch (e) {
            formattedMessage = $("<pre>").text(message);
        }

        messageElement.append(formattedMessage);
        chatContainer.append(messageElement);

        assignMessageIds();

        if (chatContainer.length) {
            setTimeout(() => {
                chatContainer.scrollTop(chatContainer.prop("scrollHeight"));
            }, 50);
        }
    }

    // Form utilities
    function createInputField(value, onChange, disabled = false) {
        let input = document.createElement("input");
        input.type = "text";
        input.value = value;
        input.disabled = disabled;
        input.oninput = (e) => onChange(e.target.value);
        return input;
    }

    function createButton(text, className, onClick) {
        let button = document.createElement("button");
        button.textContent = text;
        button.className = className + " btn-action";
        button.onclick = onClick;
        return button;
    }

    function toggleSectionVisibility(sectionKey) {
        sectionStates[sectionKey].visible = !sectionStates[sectionKey].visible;
        loadForm();
    }

    function toggleSectionExpansion(sectionKey) {
        sectionStates[sectionKey].expanded = !sectionStates[sectionKey].expanded;
        loadForm();
    }

    function createSectionHeaderRow(title, sectionKey) {
        let row = document.createElement("tr");
        row.className = "section-header";

        let titleCell = document.createElement("td");
        titleCell.colSpan = 2;

        let expandIcon = document.createElement("span");
        expandIcon.textContent = sectionStates[sectionKey].expanded ? "▼ " : "► ";
        expandIcon.style.cursor = "pointer";
        expandIcon.onclick = () => toggleSectionExpansion(sectionKey);

        let titleText = document.createTextNode(title);

        titleCell.appendChild(expandIcon);
        titleCell.appendChild(titleText);

        let actionCell = document.createElement("td");

        // Add button for specific sections
        if (sectionKey === "root_causes") {
            let addButton = createButton("Add", "btn-new", () => {
                formData.root_causes.push("");
                loadForm();
            });
            actionCell.appendChild(addButton);
        } else if (["impact_analysis", "resolution", "preventive_measures", "supplementary_info", "additional_questions"].includes(sectionKey)) {
            let addButton = createButton("New", "btn-new", () => {
                if (!formData[sectionKey].dynamic_fields) {
                    formData[sectionKey].dynamic_fields = [];
                }
                formData[sectionKey].dynamic_fields.push({ key: "New Field", value: "", type: "string", is_confirmed: true });
                loadForm();
            });
            actionCell.appendChild(addButton);
        }

        row.appendChild(titleCell);
        row.appendChild(actionCell);

        row.onclick = (e) => {
            if (e.target !== expandIcon && e.target.tagName !== 'BUTTON') {
                toggleSectionExpansion(sectionKey);
            }
        };

        return row;
    }

    function createFieldRow(label, value, onChange) {
        let row = document.createElement("tr");

        let labelCell = document.createElement("td");
        labelCell.textContent = label;

        let valueCell = document.createElement("td");
        let input = createInputField(value, onChange);
        valueCell.appendChild(input);

        let actionCell = document.createElement("td");

        row.appendChild(labelCell);
        row.appendChild(valueCell);
        row.appendChild(actionCell);

        return row;
    }

    function createDynamicFieldRow(field, index, groupKey) {
        let row = document.createElement("tr");

        let keyCell = document.createElement("td");

        let inputContainer = document.createElement("div");
        inputContainer.style.display = "flex";
        inputContainer.style.alignItems = "center";
        inputContainer.style.width = "100%";

        // Add visibility toggle (confirm/unconfirm) checkbox
        let visibilityToggle = document.createElement("input");
        visibilityToggle.type = "checkbox";
        visibilityToggle.checked = field.is_confirmed;
        visibilityToggle.style.marginRight = "5px";

        visibilityToggle.style.flexShrink = "0";
        visibilityToggle.style.width = "15px";

        visibilityToggle.onchange = () => {
            formData[groupKey].dynamic_fields[index].is_confirmed = visibilityToggle.checked;
            loadForm();
        };

        //keyCell.appendChild(visibilityToggle);

        let keyInput = createInputField(field.key, (newKey) => {
            formData[groupKey].dynamic_fields[index].key = newKey;
        }, !field.is_confirmed);
        //keyCell.appendChild(keyInput);

        keyInput.style.flexGrow = "1";

        inputContainer.appendChild(visibilityToggle);
        inputContainer.appendChild(keyInput);
        keyCell.appendChild(inputContainer)

        let valueCell = document.createElement("td");
        let valueInput = createInputField(field.value, (newValue) => {
            formData[groupKey].dynamic_fields[index].value = newValue;
        }, !field.is_confirmed);
        valueCell.appendChild(valueInput);

        let actionCell = document.createElement("td");
        let deleteButton = createButton("Delete", "btn-delete", () => {
            formData[groupKey].dynamic_fields.splice(index, 1);
            loadForm();
        });
        actionCell.appendChild(deleteButton);

        row.appendChild(keyCell);
        row.appendChild(valueCell);
        row.appendChild(actionCell);

        return row;
    }

    function createDynamicSection(groupKey, title) {
        if (!sectionStates[groupKey].visible) {
            return [createSectionHeaderRow(title, groupKey)];
        }

        let rows = [createSectionHeaderRow(title, groupKey)];

        if (!sectionStates[groupKey].expanded) {
            return rows;
        }

        let groupData = formData[groupKey];
        if (!groupData) return rows;

        // Basic fields
        Object.keys(groupData).forEach(key => {
            if (key !== "dynamic_fields") {
                rows.push(createFieldRow(
                    key.replace(/_/g, " "),
                    groupData[key],
                    (newValue) => { formData[groupKey][key] = newValue; }
                ));
            }
        });

        // Dynamic fields
        if (groupData.dynamic_fields) {
            rows.push(...groupData.dynamic_fields.map((field, index) =>
                createDynamicFieldRow(field, index, groupKey)
            ));
        }

        return rows;
    }

    function createSimpleSection(key, title) {
        if (!sectionStates[key].visible) {
            return [createSectionHeaderRow(title, key)];
        }

        let rows = [createSectionHeaderRow(title, key)];

        if (!sectionStates[key].expanded) {
            return rows;
        }

        rows.push(createFieldRow(title, formData[key], (value) => {
            formData[key] = value;
        }));

        return rows;
    }

    function createRootCausesSection() {
        if (!sectionStates.root_causes.visible) {
            return [createSectionHeaderRow("Root Causes", "root_causes")];
        }

        let rows = [createSectionHeaderRow("Root Causes", "root_causes")];

        if (!sectionStates.root_causes.expanded) {
            return rows;
        }

        if (!Array.isArray(formData.root_causes)) {
            formData.root_causes = [];
        }
        if (formData.root_causes.length === 0) {
            formData.root_causes.push("");
        }

        // Root causes items
        formData.root_causes.forEach((cause, index) => {
            let row = document.createElement("tr");

            let labelCell = document.createElement("td");
            labelCell.textContent = `Root Cause ${index + 1}`;

            let valueCell = document.createElement("td");
            let input = createInputField(cause, (newValue) => {
                formData.root_causes[index] = newValue;
            });
            valueCell.appendChild(input);

            let actionCell = document.createElement("td");
            if (index > 0) {
                let deleteButton = createButton("Delete", "btn-delete", () => {
                    formData.root_causes.splice(index, 1);
                    loadForm();
                });
                actionCell.appendChild(deleteButton);
            }

            row.appendChild(labelCell);
            row.appendChild(valueCell);
            row.appendChild(actionCell);

            rows.push(row);
        });

        return rows;
    }

    function loadForm() {
        // hide loading animation
        $("#loader").hide();

        let formContainer = document.getElementById("formContainer");
        formContainer.innerHTML = "";

        // The first four fields will no longer be added to the form display, but the data is still retained in formData.
        // formContainer.append(...createSimpleSection("category", "Category"));
        // formContainer.append(...createSimpleSection("task", "Task"));
        // formContainer.append(...createSimpleSection("summary", "Summary"));
        // formContainer.append(...createSimpleSection("description", "Description"));

        // Only show these parts
        formContainer.append(...createRootCausesSection());
        formContainer.append(...createSimpleSection("conclusion", "Conclusion"));
        formContainer.append(...createDynamicSection("impact_analysis", "Impact Analysis"));
        formContainer.append(...createDynamicSection("resolution", "Resolution"));
        formContainer.append(...createDynamicSection("preventive_measures", "Preventive Measures"));
        formContainer.append(...createDynamicSection("supplementary_info", "Supplementary Info"));
        formContainer.append(...createDynamicSection("additional_questions", "Additional Questions"));
    }

</script>




